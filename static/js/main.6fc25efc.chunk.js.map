{"version":3,"sources":["store/recipe/RecipeActionType.ts","store/recipe/RecipeActionCreators.ts","models/SupportedCountry.ts","utils/CountryUtils.ts","utils/TextUtils.ts","pages/country/recipe-preview/RecipePreview.tsx","pages/country/CountryPage.tsx","utils/RecipeMap.ts","utils/RecipeUtils.ts","pages/recipe/harmful-ingredient-detail/known-effect/KnownEffect.tsx","utils/RandomUtils.ts","pages/recipe/harmful-ingredient-detail/HarmfulIngredientDetail.tsx","common-components/separator/Separator.tsx","pages/recipe/recipe-banner/RecipeBanner.tsx","common-components/ingredient-icon/IngredientIcon.tsx","pages/recipe/recipe-content/recipe-ingredient-list/harmful-ingredient/HarmfulIngredient.tsx","pages/recipe/recipe-content/recipe-ingredient-list/recipe-ingredient/RecipeIngredient.tsx","pages/recipe/recipe-content/recipe-ingredient-list/RecipeIngredientList.tsx","pages/recipe/recipe-content/step-list/step/Step.tsx","pages/recipe/recipe-content/step-list/StepList.tsx","pages/recipe/recipe-content/RecipeContent.tsx","pages/recipe/RecipePage.tsx","i18n.ts","common-components/site-header/SiteHeader.tsx","App.tsx","reportWebVitals.ts","store/recipe/RecipeReducer.ts","store/RootReducer.ts","store/recipe/RecipeEpics.ts","store/RootEpic.ts","store/Store.ts","index.tsx"],"names":["RecipeActionType","SupportedCountry","RecipeActionCreators","country","type","INITIALISE_COUNTRY_PAGE","payload","recipePreviews","SET_RECIPE_PREVIEWS","recipeId","LOAD_RECIPE","recipe","SET_RECIPE","CountryUtils","countryName","lowercaseCountry","toLowerCase","Object","values","some","props","match","params","getCountryNameFromProp","isKnownCountry","TextUtils","translationKey","args","undefined","t","placeholder","localizedString","this","getString","RecipePreview","state","isTranslationReady","namespacePromise","i18n","loadNamespaces","recipePreview","id","setState","size","name","start","end","Card","animation","className","height","width","ResponsiveContext","Consumer","Grid","columns","getLayoutColumnsForSize","rows","getLayoutRowsForSize","areas","getLayoutGridAreasForSize","Image","fit","src","images","url","getLocaleStringOrPlaceholder","title","subtitle","CardBody","margin","top","getEllipsizedDescription","getRecipeString","description","length","slice","React","PureComponent","withTranslation","mapDispatch","initialiseCountryPage","connector","connect","getCountryName","isKnownCountryInProp","toLocaleUpperCase","showRecipePreviews","to","history","push","Array","fill","Box","List","onClickItem","event","onRecipePreviewClick","item","pad","vertical","getListVerticalPaddingForScreenSize","data","primaryKey","children","index","RecipeMap","RecipeUtils","Promise","all","map","countryRecipePath","getJSONByLocalPath","fetchIngredients","recipeIngredients","fetchHarmfulIngredients","harmfulIngredients","resolve","ingredients","ingredientString","matches","INGREDIENT_ID_REGEX","Error","includes","ingredientJSON","a","ingredientId","getIngredientIdFromStringOrThrow","ingredient","recipeIngredient","quantity","note","harmfulIngredientString","harmfulIngredientId","getHarmfulIngredientIdFromStringOrThrow","harmfulIngredient","HARMFUL_INGREDIENT_ID_REGEX","filePath","axios","get","response","reject","KnownEffect","key","getHarmfulIngredientString","effect","citations","citation","link","href","target","rel","authors","showCitations","RandomUtils","array","Math","floor","random","HarmfulIngredientDetail","randomIntro","getRandomElement","harmfulIngredientName","getHarmfulIngredientName","knownEffects","knownEffect","getHarmfulIngredientStringWithArgs","getHarmfulIngredientIntro","alignSelf","gap","style","maxWidth","getEUBanTitle","getEUBanMessage","getRowsForSize","getColumnsForSize","getGapBySize","showKnownEffects","Separator","thickness","RecipeBanner","background","getBannerColumnsForSize","getBannerRowsForSize","getBannerAreasForSize","getBannerAreaGapBySize","gridArea","getSubtitle","IngredientIcon","HarmfulIngredient","barbs","barbKey","image","alignContent","getIngredientDetails","getBarb","RecipeIngredient","noteTranslationKey","ingredientName","getIngredientString","recipeQuantity","ingredientAndQuantity","bottom","RecipeIngredientList","harmfulIngredientsCount","showRecipeIngredients","getHarmfulIngredientTitle","showHarmfulIngredients","Step","getLocaleString","number","step","StepList","steps","showSteps","RecipeContent","getContentColumnsForSize","getContentRowsForSize","getContentAreasForSize","getContentAreaGapBySize","loadRecipe","RecipePage","hasRecipe","loadTranslationStrings","showHarmfulIngredientDetails","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","process","interpolation","escapeValue","SiteHeader","justify","Menu","a11yTitle","dropProps","align","right","icon","color","items","label","direction","Anchor","Header","getSmallScreenHeader","getStandardHeader","theme","global","colors","react","font","family","App","Suspense","fallback","Grommet","full","exact","path","component","CountryPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RecipeReducer","RECIPE_INITIAL_STATE","action","updateRecipePreviews","clearRecipe","setRecipe","rootReducer","combineReducers","getReducer","RecipeEpics","combineEpics","fetchRecipePreviews","fetchRecipe","action$","pipe","ofType","mergeMap","recipeAction","getRecipePreviewsForCountry","setRecipePreviews","RootEpic","getEpics","store","preloadedState","middlewares","epicMiddleware","createEpicMiddleware","epics","getCombinedEpic","enhancers","compose","applyMiddleware","createStore","run","configureSiteStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"icAAYA,E,0IAAAA,K,kDAAAA,E,0CAAAA,E,0BAAAA,E,yBAAAA,M,KCML,ICNKC,EDMCC,EAAb,0GAEE,SAAoCC,GAClC,MAAO,CACLC,KAAMJ,EAAiBK,wBACvBC,QAASH,KALf,+BASE,SAAgCI,GAC9B,MAAO,CACLH,KAAMJ,EAAiBQ,oBACvBF,QAASC,KAZf,wBAgBE,SAAyBJ,EAA2BM,GAClD,MAAO,CACLL,KAAMJ,EAAiBU,YACvBJ,QAAS,CACPH,UACAM,eArBR,uBA0BE,SAAwBE,GACtB,MAAO,CACLP,KAAMJ,EAAiBY,WACvBN,QAASK,OA7Bf,M,SCNYV,K,eAAAA,M,KCIL,IAAMY,EAAb,mGAEE,SAA6BC,GAC3B,IAAMC,EAAgB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAaE,cACtC,OAA2B,MAApBD,GAA4BE,OAAOC,OAAOjB,GAC9CkB,MAAK,SAAChB,GAAD,OAAqBA,IAAYY,OAL7C,oCAQE,SAAqCK,GACnC,OAAOA,EAAMC,MAAMC,OAAOnB,QAAQa,gBATtC,kCAYE,SAAmCI,GACjC,IAAMN,EAAcD,EAAaU,uBAAuBH,GACxD,OAAOP,EAAaW,eAAeV,OAdvC,K,6CCFaW,G,OAAb,8FAEE,SACEL,EACAM,GAES,IADTC,EACQ,4DADIC,EAEZ,OAAOR,EAAMS,EAAEH,EAAgBC,KAPnC,oCAUE,SACEP,EACAM,EACAI,GAEA,IAAMC,EAAkBX,EAAMS,EAAEH,GAChC,OAAKK,GAAmBA,IAAoBL,EAGnCK,EAFAD,IAjBb,iCAuBE,SACEV,EACAM,GAEA,OAAOM,KAAKC,UACVb,EADK,sBAEUM,MA7BrB,wCAiCE,SACEN,EACAM,GAEA,OAAOM,KAAKC,UACVb,EADK,8BAEkBM,MAvC7B,gDA2CE,SACEN,EACAM,EACAC,GAEA,OAAOK,KAAKC,UACVb,EADK,8BAEkBM,GACvBC,KAnDN,6BAuDE,SACEP,EACAM,EACAjB,GAEA,OAAOuB,KAAKC,UACVb,EADK,iBAEKX,EAFL,YAEiBiB,QA9D5B,M,OCaMQ,E,4MAEJC,MAA4B,CAC1BC,oBAAoB,G,EAGtBC,iBAAyC,K,uDAEzC,WAAqB,IAAD,OAClBL,KAAKZ,MAAMkB,KAAKC,eAAhB,iBAAyCP,KAAKZ,MAAMoB,cAAcC,KAAM,WACtE,EAAKC,SAAS,CACZN,oBAAoB,S,qCAK1B,SAAwBO,GACtB,OAAQA,GACN,IAAK,SACL,IAAK,QAEH,MAAO,CAAC,QACV,QAGE,MAAO,CAAC,MAAO,U,kCAIrB,SAAqBA,GACnB,OAAQA,GACN,IAAK,SACL,IAAK,QACH,MAAO,CAAC,OAAQ,QAClB,QACE,MAAO,CAAC,W,uCAId,SACEA,GAEE,OAAQA,GACN,IAAK,SACL,IAAK,QACH,MAAO,CAIL,CAAEC,KAAM,YAAaC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC7C,CAAEF,KAAM,UAAWC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE/C,QAIE,MAAO,CACL,CAAEF,KAAM,YAAaC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC7C,CAAEF,KAAM,UAAWC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,Q,oBAIrD,WAAU,IAAD,OACDN,EAAgBR,KAAKZ,MAAMoB,cACjC,OAAKR,KAAKG,MAAMC,mBAQd,cAACW,EAAA,EAAD,CAAMC,UAAU,SAASC,UAAU,UAAUC,OAAO,OAAOC,MAAM,OAAjE,SACE,cAACC,EAAA,EAAkBC,SAAnB,UACG,SAACV,GAAD,OACC,eAACW,EAAA,EAAD,CACEC,QAAS,EAAKC,wBAAwBb,GACtCc,KAAM,EAAKC,qBAAqBf,GAChCgB,MAAO,EAAKC,0BAA0BjB,GAHxC,UAKA,cAACkB,EAAA,EAAD,CAAOZ,UAAU,YAAYa,IAAI,UAAUC,IAAKvB,EAAcwB,OAAO,GAAGC,MACxE,gCACE,oBAAIhB,UAAU,QAAd,SACC,EAAKiB,6BAAL,UACI,EAAK9C,MAAMoB,cAAc2B,UAG9B,sBAAMlB,UAAU,WAAhB,SAA4B,EAAKiB,6BAAL,UACvB,EAAK9C,MAAMoB,cAAc4B,aAE9B,cAACC,EAAA,EAAD,CAAUpB,UAAU,cAAcqB,OAAQ,CAACC,IAAK,OAAhD,SACG,EAAKC,yBAAyB,EAAKpD,MAAMoB,4BAzBpD,cAACO,EAAA,EAAD,CAAMC,UAAU,SAASC,UAAU,UAAUC,OAAO,OAAOC,MAAM,W,0CAoCrE,SAA6BzB,GAA8D,IAAtCI,EAAqC,uDAAf,MACzE,OAAIE,KAAKG,MAAMC,mBACNX,EAAUgD,gBACfzC,KAAKZ,MACLM,EACAM,KAAKZ,MAAMoB,cAAcC,IAGpBX,I,sCAIX,SAAyBU,GACvB,IAAMkC,EAAc1C,KAAKkC,6BAA6B1B,EAAckC,aACpE,OAAIA,EAAYC,OAAS,GACjB,GAAN,OAAUD,EAAYE,MAAM,EAAG,IAA/B,OAEOF,M,GAvHeG,IAAMC,eA4HnBC,gBAAkB7C,GC3H3B8C,G,OAAc,CAClBC,sBAAuB/E,EAAqB+E,wBA4E/BC,EAzEGC,aARD,SAAChD,GAAD,MAAuB,CACtC5B,eAAgB4B,EAAMxB,OAAOJ,kBAOKyE,EAyErBE,C,uKAlEb,WACE,IAAMpE,EAAckB,KAAKoD,iBACrBvE,EAAaW,eAAeV,IAC9BkB,KAAKZ,MAAM6D,sBAAsBnE,K,oBAIrC,WACE,OAAID,EAAawE,qBAAqBrD,KAAKZ,OAEvC,gCACE,6BAAKP,EAAaU,uBAAuBS,KAAKZ,OAAOkE,sBAClDtD,KAAKuD,wBAIL,cAAC,IAAD,CAAUC,GAAG,a,iDAIxB,SAAoC7C,GAClC,OAAQA,GACN,IAAK,SACL,IAAK,QACH,MAAO,SACT,QACE,MAAO,W,4BAIb,WACE,OAAO9B,EAAaU,uBAAuBS,KAAKZ,S,kCAGlD,SAAqBoB,GACdA,GAILR,KAAKZ,MAAMqE,QAAQC,KAAnB,UAA2B1D,KAAKoD,iBAAhC,YAAoD5C,EAAcC,O,gCAGpE,WAAsB,IAAD,OACnB,GAAIT,KAAKZ,MAAMb,eAAeoE,OAAS,EAAG,CAGxC,IAAMpE,EAAiBoF,MAAM,IAAIC,KAAK5D,KAAKZ,MAAMb,eAAe,IAChE,OACE,cAAC6C,EAAA,EAAkBC,SAAnB,UACG,SAACV,GAAD,OACC,cAACkD,EAAA,EAAD,CAAK5C,UAAU,kBAAf,SACA,cAAC6C,EAAA,EAAD,CACAC,YAAa,SAACC,GAAD,OAAqD,EAAKC,qBAAqBD,EAAME,OAClGC,IAAK,CAACC,SAAU,EAAKC,oCAAoC1D,IACzD2D,KAAM/F,EACNgG,WAAW,KACXC,SAAU,SAACN,EAAqBO,GAAtB,OAAwC,cAAC,EAAD,CAAwBjE,cAAe0D,iB,GA1D3ErB,IAAMC,gB,mDCzBnB4B,EAAyC,CACpD,MAAS,CACP,qBCOSC,EAAb,gHAKE,SAA0CxG,GAAsD,IAAD,OAC7F,OAAOyG,QAAQC,IACbH,EAAUvG,GAAS2G,KAAI,SAAAC,GAGrB,OAAO,EAAKC,mBAAL,kBAAmC7G,EAAnC,YAA8C4G,UAV7D,gEAeE,WACE5G,EACAM,GAFF,2FAI8BuB,KAAKgF,mBAAL,mBACd7G,EADc,YACHM,EADG,YACSA,EADT,UAJ9B,cAIQ+B,EAJR,gBAOkCR,KAAKiF,iBAAiBzE,GAPxD,cAOQ0E,EAPR,gBAQmClF,KAAKmF,wBAAwB3E,GARhE,cAQQ4E,EARR,yBAUSR,QAAQS,QAAR,2BACF7E,GADE,IAEL8E,YAAaJ,EACbE,mBAAoBA,MAbxB,iDAfF,uGAgCE,SAA+CG,GAC7C,IAAMC,EAAUD,EAAiBlG,MAAMW,KAAKyF,qBAC5C,IAAKD,EACH,MAAME,MAAM,qBAAD,OAAsBH,EAAtB,0CAGb,GAAuB,IAAnBC,EAAQ7C,OACV,MAAM+C,MAAM,2DAAD,OAA4DH,EAA5D,mBAAuFC,EAAQ7C,OAA/F,aAGb,OAAO6C,EAAQ,KA1CnB,uBA6CE,SAAwBrH,EAA2BM,GACjD,OAAOiG,EAAUvG,GAASwH,SAAnB,UAA+BlH,EAA/B,YAA2CA,EAA3C,YA9CX,qEAiDE,WACE+B,GADF,qGAGSoE,QAAQC,IACbrE,EAAc8E,YAAYR,IAA1B,uCAA8B,WAAMc,GAAN,mBAAAC,EAAA,6DACtBC,EAAenB,EAAYoB,iCAAiCH,EAAeI,YADrD,SAES,EAAKhB,mBAAL,uBAAwCc,EAAxC,YAAwDA,EAAxD,UAFT,cAEtBE,EAFsB,OAGtBC,EAAqC,CACzCD,WAAYA,EACZE,SAAUN,EAAeM,SACzBC,KAAMP,EAAeO,MANK,kBAQrBvB,QAAQS,QAAQY,IARK,2CAA9B,yDAJJ,2CAjDF,mIAkEE,WACEzF,GADF,qGAGSoE,QAAQC,IACbrE,EAAc4E,mBAAmBN,IAAjC,uCAAqC,WAAMsB,GAAN,iBAAAP,EAAA,6DAC7BQ,EAAsB1B,EAAY2B,wCAAwCF,GAD7C,SAEH,EAAKpB,mBAAL,+BAAgDqB,EAAhD,YAAuEA,EAAvE,UAFG,cAE7BE,EAF6B,yBAI5B3B,QAAQS,QAAQkB,IAJY,2CAArC,yDAJJ,2CAlEF,4GA+EE,SAAsDH,GACpD,IAAMZ,EAAUY,EAAwB/G,MAAMW,KAAKwG,6BACnD,IAAKhB,EACH,MAAME,MAAM,6BAAD,OAA8BU,EAA9B,0CAGb,GAAuB,IAAnBZ,EAAQ7C,OACV,MAAM+C,MAAM,mEAAD,OAAoEU,EAApE,mBAAsGZ,EAAQ7C,OAA9G,aAGb,OAAO6C,EAAQ,KAzFnB,uEA4FE,WAAwCiB,GAAxC,gGAE2BC,IAAMC,IAAIF,GAFrC,cAEUG,EAFV,yBAGWhC,QAAQS,QAAQuB,EAAStC,OAHpC,yDAMWM,QAAQiC,OAAR,OANX,yDA5FF,8DAAalC,EAEIc,oBAAsB,2BAF1Bd,EAGI6B,4BAA8B,mC,WCDzCM,E,+JAEJ,SAAUC,GACR,OAAOtH,EAAUuH,2BAA2BhH,KAAKZ,MAAO2H,K,2BAG1D,WACE,OAAO/G,KAAKZ,MAAM6H,OAAOC,UAAUpC,KAAI,SAACqC,EAAU1C,GAChD,OAAI0C,EAASC,KACJ,sBAAMnG,UAAU,WAAhB,SACL,mBAAGoG,KAAMF,EAASC,KAAME,OAAO,SAASC,IAAI,aAA5C,SAA0DJ,EAASK,WAD9B/C,GAIhC,sBAAMxD,UAAU,WAAhB,SAAwCkG,EAASK,SAAjB/C,Q,oBAK7C,WACE,IAAQwC,EAAWjH,KAAKZ,MAAhB6H,OACR,OACE,eAACpD,EAAA,EAAD,WACE,oBAAI5C,UAAU,QAAd,SAAuBjB,KAAKC,UAAUgH,EAAOrG,QAC7C,sBAAMK,UAAU,cAAhB,SAA+BjB,KAAKC,UAAUgH,EAAOvE,eACrD,cAACmB,EAAA,EAAD,CAAKM,IAAK,CAAC5B,IAAK,SAAhB,SACCvC,KAAKyH,yB,GAzBY5E,IAAMC,eAgCjBC,cAAgB,CAAC,uBAAjBA,CAAyC+D,GC3C3CY,G,OAAb,qGAEE,SAAkCC,GAChC,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMhF,aAHlD,MCcMoF,E,uKACJ,WACE,OAAQ/H,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAAC,QACV,QACE,MAAO,CAAC,MAAO,MAAO,U,4BAI5B,WACE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAAC,OAAQ,OAAQ,QAC1B,QACE,MAAO,CAAC,W,0BAId,WACE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,OACT,QACE,MAAO,W,uBAIb,SAAUoG,EAAapH,GACrB,OAAOK,KAAKZ,MAAMS,EAAEkH,EAAKpH,K,sCAG3B,WACE,OAAOF,EAAUuH,2BAA2BhH,KAAKZ,MAAOY,KAAKZ,MAAMmH,kBAAkB3F,MAAM5B,gB,uCAG7F,WACE,IAAMgJ,EAAW,8CAA0CN,EAAYO,iBAAiB,CAAC,EAAG,EAAG,KAC/F,OAAOjI,KAAKC,UACV+H,EACA,CAAEE,sBAAuBlI,KAAKmI,+B,8BAIlC,WACE,OAAOnI,KAAKZ,MAAMmH,kBAAkB6B,aAAatD,KAAI,SAACuD,EAAa5D,GACjE,OACE,cAAC,EAAD,CAAawC,OAAQoB,GAAkB5D,Q,6BAK7C,WACE,OAAOhF,EAAU6I,mCACftI,KAAKZ,MADA,6CAGL,CAAE8I,sBAAuBlI,KAAKmI,+B,2BAIlC,WACE,OAAO1I,EAAUuH,2BACfhH,KAAKZ,MADA,8C,oBAMT,WACE,OACE,eAACyE,EAAA,EAAD,CAAK5C,UAAU,4BAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBjB,KAAKuI,8BAC5B,sBAAMtH,UAAU,cAAhB,SAA+BxB,EAAUuH,2BAA2BhH,KAAKZ,MAAOY,KAAKZ,MAAMmH,kBAAkB7D,eAC7G,cAACmB,EAAA,EAAD,UACE,eAACvC,EAAA,EAAD,CAAMC,QAAS,CAAC,OAAQ,QAASiH,UAAU,SAASrE,IAAK,CAACC,SAAU,QAASqE,IAAI,SAAjF,UACE,cAAC5G,EAAA,EAAD,CAAO6G,MAAO,CAACC,SAAU,SAAU7G,IAAI,UAAUC,IAAI,2CACrD,eAAC8B,EAAA,EAAD,WACE,oBAAI5C,UAAU,eAAd,SAA8BjB,KAAK4I,kBACnC,sBAAM3H,UAAU,cAAhB,SAA+BjB,KAAK6I,4BAI1C,cAACvH,EAAA,EAAD,CACAG,KAAMzB,KAAK8I,iBACXvH,QAASvB,KAAK+I,oBACdN,IAAKzI,KAAKgJ,eAHV,SAKChJ,KAAKiJ,4B,GAzFwBpG,IAAMC,eAgG7BC,cAAgB,CAAC,eAAjBA,CAAiCgF,GCpG3BmB,G,mKAEnB,WACE,OACE,cAACrF,EAAA,EAAD,CAAKM,IAAKnE,KAAKZ,MAAM+E,IAArB,SACE,qBAAKlD,UAAU,YAAYyH,MAAO,CAACxH,OAAQlB,KAAKZ,MAAM+J,WAAa,e,GALpCtG,IAAMC,gBCExBsG,G,oLACnB,WACE,OAAQpJ,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QAEH,MAAO,CAAC,QACV,QAGE,MAAO,CAAC,MAAO,U,kCAIrB,WACE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAAC,OAAQ,QAClB,QACE,MAAO,CAAC,W,mCAId,WAKE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAIL,CAAEC,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACzC,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE7C,QAIE,MAAO,CACL,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACzC,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,Q,oCAKjD,WACE,OAAQd,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,OACT,QACE,MAAO,W,6BAIb,SAAgBjB,GACd,OAAOM,KAAKZ,MAAMqD,gBAAgB/C,K,yBAGpC,SAAYf,GACV,OAAIA,EAAOyD,SACFpC,KAAKyC,gBAAgB9D,EAAOyD,UAE5B,K,oBAIX,WACE,IAAMzD,EAASqB,KAAKZ,MAAMT,OAC1B,OACI,cAACkF,EAAA,EAAD,CAAK5C,UAAU,SAASoI,WAAW,UAAnC,SACE,eAAC/H,EAAA,EAAD,CACEC,QAASvB,KAAKsJ,0BACd7H,KAAMzB,KAAKuJ,uBACX5H,MAAO3B,KAAKwJ,wBACZf,IAAKzI,KAAKyJ,yBAJZ,UAME,eAAC5F,EAAA,EAAD,CAAK6F,SAAS,QAAQzI,UAAU,QAAhC,UACE,oBAAIA,UAAU,QAAd,SAAuBjB,KAAKyC,gBAAgB9D,EAAOwD,SACnD,sBAAMlB,UAAU,WAAhB,SAA4BjB,KAAK2J,YAAYhL,KAC7C,cAAC,EAAD,CAAWwF,IAAI,WACf,mBAAGlD,UAAU,2BAAb,SACGjB,KAAKyC,gBAAgB9D,EAAO+D,kBAGjC,cAACb,EAAA,EAAD,CACE6H,SAAS,QACTzI,UAAU,QACVc,IAAKpD,EAAOqD,OAAO,GAAGC,IACtBH,IAAI,mB,GA9FwBe,IAAMC,gBCL3B8G,G,mKAEnB,WACE,OAAO,cAAC/H,EAAA,EAAD,CAAOC,IAAI,UAAUb,UAAU,kBAAkBc,IAAK/B,KAAKZ,MAAM6C,U,GAHhCY,IAAMC,gBCO5C+G,E,0KAEJ,WACE,OAAOpK,EAAUuH,2BACfhH,KAAKZ,MACLY,KAAKZ,MAAMmH,kBAAkB3F,Q,qBAIjC,WACE,GAAIZ,KAAKZ,MAAMmH,kBAAkBuD,MAAMnH,OAAS,EAAG,CACjD,IAAMoH,EAAUrC,EAAYO,iBAC1BjI,KAAKZ,MAAMmH,kBAAkBuD,OAE/B,OAAOrK,EAAUuH,2BAA2BhH,KAAKZ,MAAO2K,GAG1D,MAAO,K,oBAGT,WACE,OACE,eAACzI,EAAA,EAAD,CAAMC,QAAS,CAAC,MAAO,OAAQE,KAAK,OAAOP,OAAO,SAASuH,IAAI,QAA/D,UACE,cAAC5E,EAAA,EAAD,CAAK5C,UAAU,6BAAf,SACE,cAAC,EAAD,CAAgBgB,IAAKjC,KAAKZ,MAAMmH,kBAAkByD,MAAM/H,QAE1D,eAAC4B,EAAA,EAAD,CAAKoG,aAAa,QAAQzB,UAAU,SAApC,UACE,qBAAKvH,UAAU,mBAAf,SAAmCjB,KAAKkK,yBACxC,qBAAKjJ,UAAU,+BAAf,SAA+CjB,KAAKmK,sB,GA5B9BtH,IAAMC,eAmCvBC,cAAgB,CAAC,uBAAjBA,CAAyC8G,GCpClDO,G,iLAEJ,WACE,MAAuCpK,KAAKZ,MAApC6G,EAAR,EAAQA,iBAAkBxH,EAA1B,EAA0BA,SACtB4L,EAAqBpE,EAAiBE,KACpCmE,EAAiB7K,EAAU8K,oBAAoBvK,KAAKZ,MAAO6G,EAAiBD,WAAWpF,MACvF4J,EAAiB/K,EAAUgD,gBAAgBzC,KAAKZ,MAAO6G,EAAiBC,SAAUzH,GAClFgM,EAAqB,UAAMH,EAAN,cAA0BE,GACjDrE,EAAsB,KAI1B,OAHIkE,IACFlE,EAAO1G,EAAUgD,gBAAgBzC,KAAKZ,MAAOiL,EAAoB5L,IAE/D0H,EACI,GAAN,OAAUsE,EAAV,aAAoCtE,EAApC,KAEOsE,I,oBAIX,WACE,IAAQzE,EAAehG,KAAKZ,MAAM6G,iBAA1BD,WACR,OACE,eAAC1E,EAAA,EAAD,CAAMC,QAAS,CAAC,MAAO,OAAQE,KAAK,OAAOP,OAAO,SAASuH,IAAI,QAAQtE,IAAK,CAACuG,OAAQ,UAArF,UACE,cAAC7G,EAAA,EAAD,CAAK5C,UAAU,6BAAf,SACE,cAAC,EAAD,CAAgBgB,IAAK+D,EAAWgE,MAAM/H,QAExC,cAAC4B,EAAA,EAAD,CAAKoG,aAAa,QAAQzB,UAAU,SAApC,SACE,qBAAKvH,UAAU,oBAAf,SAAoCjB,KAAKkK,kC,GA3BpBrH,IAAMC,gBAkCtBC,cAAgB,CAAC,eAAjBA,CAAiCqH,GCnC1CO,G,qLACJ,WACE,OAAQ3K,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QAEH,MAAO,CAAC,QACV,QAGE,MAAO,CAAC,MAAO,U,mCAIrB,WACE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAAC,OAAQ,QAClB,QACE,MAAO,CAAC,W,oCAId,WAKE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAIL,CAAEC,KAAM,cAAeC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC/C,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE7C,QAIE,MAAO,CACL,CAAEF,KAAM,cAAeC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC/C,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,Q,qCAKjD,WACE,OAAQd,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,OACT,QACE,MAAO,W,mCAIb,WAAyB,IAAD,OACtB,OAAOX,KAAKZ,MAAMT,OAAO2G,YAAYR,KAAI,SAACkB,GACxC,OACE,cAAC,EAAD,CACEC,iBAAkBD,EAElBvH,SAAU,EAAKW,MAAMT,OAAO8B,IADvBuF,EAAWA,WAAWvF,S,oCAOnC,WAA0B,IAAD,OACvB,OAAOT,KAAKZ,MAAMT,OAAOyG,mBAAmBN,KAAI,SAACyB,GAC/C,OACE,cAAC,EAAD,CACEA,kBAAmBA,EACnB9H,SAAU,EAAKW,MAAMT,OAAO8B,IACvB8F,EAAkB9F,S,uCAM/B,WACE,IAAMmK,EAA0B5K,KAAKZ,MAAMT,OAAOyG,mBAAmBzC,OACrE,OAAgC,IAA5BiI,EACK,GAC8B,IAA5BA,EACF5K,KAAKZ,MAAMS,EAAE,kCAEbG,KAAKZ,MAAMS,EAAE,qC,oBAIxB,WACE,OAAQ,eAACgE,EAAA,EAAD,CAAK6F,SAAS,cAAd,UACL1J,KAAK6K,wBACN,oBAAI5J,UAAU,2BAAd,SAA0CjB,KAAK8K,8BAC9C9K,KAAK+K,gC,GAnGuBlI,IAAMC,gBAyG1BC,cAAgB,CAAC,eAAjBA,CAAiC4H,GC3G1CK,I,4KAEJ,SAAgBtL,GACd,OAAOM,KAAKZ,MAAMS,EAAEH,K,oBAGtB,WACE,OACE,eAACmE,EAAA,EAAD,CAAK5C,UAAU,OAAf,UACE,oBAAIA,UAAU,QAAd,mBAA0BjB,KAAKiL,gBAAgB,oBAA/C,YAAsEjL,KAAKZ,MAAM8L,UACjF,sBAAMjK,UAAU,oBAAhB,SAAqCjB,KAAKZ,MAAM+L,c,GAVrCtI,IAAMC,gBAgBVC,eAAgB,CAAC,eAAjBA,CAAiCiI,ICDjCI,G,+JAfb,WACE,OAAOpL,KAAKZ,MAAMT,OAAO0M,MAAMvG,KAAI,SAACqG,EAAM1G,GACxC,OAAO,cAAC,GAAD,CAAkB0G,KAAMA,EAAMD,OAAQzG,EAAQ,GAAnCA,Q,oBAItB,WACE,OACE,8BACGzE,KAAKsL,kB,GAXSzI,IAAMC,eCwFdyI,I,qLAnFb,WACE,OAAQvL,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QAEH,MAAO,CAAC,QACV,QAGE,MAAO,CAAC,MAAO,U,mCAIrB,WACE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAAC,OAAQ,QAClB,QACE,MAAO,CAAC,W,oCAId,WAKE,OAAQX,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,CAIL,CAAEC,KAAM,kBAAmBC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACnD,CAAEF,KAAM,YAAaC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAEjD,QAIE,MAAO,CACL,CAAEF,KAAM,kBAAmBC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACnD,CAAEF,KAAM,YAAaC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,Q,qCAKrD,WACE,OAAQd,KAAKZ,MAAMuB,MACjB,IAAK,SACL,IAAK,QACH,MAAO,OACT,QACE,MAAO,W,oBAIb,WACE,OACE,cAACkD,EAAA,EAAD,CAAK5C,UAAU,UAAf,SACE,eAACK,EAAA,EAAD,CACEC,QAASvB,KAAKwL,2BACd/J,KAAMzB,KAAKyL,wBACX9J,MAAO3B,KAAK0L,yBACZjD,IAAKzI,KAAK2L,0BAJZ,UAME,cAAC9H,EAAA,EAAD,CAAK6F,SAAS,kBAAd,SACE,cAAC,EAAD,CACE/K,OAAQqB,KAAKZ,MAAMT,OACnBgC,KAAMX,KAAKZ,MAAMuB,SAGrB,cAACkD,EAAA,EAAD,CAAK6F,SAAS,YAAd,SACE,cAAC,GAAD,CAAU/K,OAAQqB,KAAKZ,MAAMT,oB,GA5EbkE,IAAMC,gBCQ5BE,GAAc,CAClB4I,WAAY1N,EAAqB0N,YAG7B1I,GAAYC,aARD,SAAChD,GAAD,MAAuB,CACtCxB,OAAQwB,EAAMxB,OAAOA,UAOaqE,IAW9B6I,G,4MACJ1L,MAAqB,CACnBC,oBAAoB,G,uDAGtB,WACE,IAAMtB,EAAcD,EAAaU,uBAAuBS,KAAKZ,OACvDX,EAAWuB,KAAKZ,MAAMC,MAAMC,OAAOb,SAEvCI,EAAaW,eAAeV,IAC5B6F,EAAYmH,UAAUhN,EAAaL,IAEnCuB,KAAKZ,MAAMwM,WAAW9M,EAAaL,K,gCAIvC,SAAmBW,GACZY,KAAKG,MAAMC,oBAA2C,MAArBJ,KAAKZ,MAAMT,QAC/CqB,KAAK+L,2B,oCAIT,WAA0B,IAAD,OACjBpN,EAASqB,KAAKZ,MAAMT,OAC1BqB,KAAKZ,MAAMkB,KAAKC,eAAhB,iBAAyC5B,EAAO8B,KAAM,WACpD,EAAKC,SAAS,CACZN,oBAAoB,S,6BAK1B,SAAgBV,GACd,OAAOD,EAAUgD,gBACfzC,KAAKZ,MACLM,EACAM,KAAKZ,MAAMT,OAAQ8B,M,iCAIvB,SAAoBf,GAClB,OAAOD,EAAU8K,oBAAoBvK,KAAKZ,MAAOM,K,0CAGnD,SAA6BiB,GAAe,IAAD,EACzC,iBAAOX,KAAKZ,MAAMT,cAAlB,aAAO,EAAmByG,mBAAmBN,KAAI,SAACyB,EAAmB9B,GACnE,OACE,cAAC,EAAD,CAAyB8B,kBAAmBA,EAA+B5F,KAAMA,GAAb8D,Q,oBAK1E,WAAU,IAAD,OACD9F,EAASqB,KAAKZ,MAAMT,OAC1B,OAAKA,GAAWqB,KAAKG,MAAMC,mBAKzB,cAACgB,EAAA,EAAkBC,SAAnB,UACG,SAACV,GAAD,OACC,iCACE,cAAC,EAAD,CACEA,KAAMA,EACNhC,OAAQA,EACR8D,gBAAiB,SAAC/C,GAAD,OACf,EAAK+C,gBAAgB/C,MAGzB,cAAC,GAAD,CAAef,OAAQA,EAAQgC,KAAMA,IACpC,EAAKqL,6BAA6BrL,SAflC,iD,GAtDYkC,IAAMC,eA6EhBI,MAAUH,YAAgB,CAAC,cAAe,sBAAuB,eAAvDA,CAAuE8I,K,gDC1GhGvL,KAGG2L,IAAIC,MAGJD,IAAIE,MAEJF,IAAIG,MAGJC,KAAK,CACJC,YAAa,KACbC,OAAiCC,EAEjCC,cAAe,CACbC,aAAa,KAKJpM,GAAf,EAAeA,I,kDCnBTqM,I,iLACJ,WACE,OACE,cAAC9I,EAAA,EAAD,CAAK+I,QAAQ,MAAb,SACE,cAACC,GAAA,EAAD,CACEC,UAAU,kBACVC,UAAW,CAAEC,MAAO,CAAEzK,IAAK,SAAU0K,MAAO,UAC5CC,KAAM,cAAC,KAAD,CAAUC,MAAM,UACtBC,MAAO,CACL,CACEC,MACE,cAACxJ,EAAA,EAAD,CAAKM,IAAI,QAAQlD,UAAU,cAA3B,SACGjB,KAAKiL,gBAAgB,uBAG1B5D,KAAM,iB,+BAQlB,WACE,OACE,cAACxD,EAAA,EAAD,CAAK+I,QAAQ,MAAMU,UAAU,MAAM7E,IAAI,SAAvC,SACE,cAAC8E,GAAA,EAAD,CACEtM,UAAU,cACVoG,KAAK,SACLgG,MAAOrN,KAAKiL,gBAAgB,2B,6BAMpC,SAAgBvL,GAAwD,IAAhCC,EAA+B,4DAAnBC,EAClD,OAAOI,KAAKZ,MAAMS,EAAEH,EAAgBC,K,oBAGtC,WAAU,IAAD,OACP,OACE,eAAC6N,GAAA,EAAD,CAAQnE,WAAW,UAAUlF,IAAI,QAAQjD,OAAO,UAAhD,UACE,cAACqM,GAAA,EAAD,CACEtM,UAAU,eACVoG,KAAK,8BACL6F,KAAM,cAAC,KAAD,CAAaC,MAAM,aACzBE,MAAOrN,KAAKiL,gBAAgB,uBAG9B,cAAC7J,EAAA,EAAkBC,SAAnB,UACG,SAACV,GAAD,MACU,UAATA,EACI,EAAK8M,uBACL,EAAKC,8B,GArDI7K,IAAMC,gBA6DhBC,eAAgB,CAAC,eAAjBA,CAAiC4J,IC5D1CgB,GAAQ,CACZC,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJpN,KAAM,OACNO,OAAQ,OACR8M,OACE,gEAwBOC,OAnBf,WACE,OACE,cAAC,IAAMC,SAAP,CAAgBC,SAAS,YAAzB,SACE,eAACC,GAAA,EAAD,CAAST,MAAOA,GAAOU,MAAI,EAA3B,UACE,cAAC,GAAD,IACA,cAACxK,EAAA,EAAD,CAAKM,IAAI,SAAT,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmK,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,IAAD,CAAU/K,GAAG,aAEf,cAAC,IAAD,CAAO+K,KAAK,YAAYC,UAAWC,EAAaH,OAAK,IACrD,cAAC,IAAD,CAAOC,KAAK,sBAAsBC,UAAW3C,gBCpB1C6C,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCFDQ,GAAb,+FAQE,WAA0G,IAAjFhP,EAAgF,uDAAxEgP,EAAcC,qBAAsBC,EAAoC,uCACvG,OAAQA,EAAOjR,MACb,KAAKJ,EAAiBQ,oBAAqB,OAAO2Q,EAAcG,qBAAqBnP,EAAOkP,EAAO/Q,SACnG,KAAKN,EAAiBU,YAAa,OAAOyQ,EAAcI,YAAYpP,GACpE,KAAKnC,EAAiBY,WAAY,OAAOuQ,EAAcK,UAAUrP,EAAOkP,EAAO/Q,SAC/E,QAAS,OAAO6B,KAbtB,kCAiBE,SAAoCA,EAAoB5B,GACtD,OAAO,2BACF4B,GADL,IAEE5B,qBApBN,yBAwBE,SAA2B4B,GACzB,OAAO,2BACFA,GADL,IAEExB,OAAQ,SA3Bd,uBA+BE,SAAyBwB,EAAoBxB,GAC3C,OAAO,2BACFwB,GADL,IAEExB,eAlCN,KAAawQ,GAEGC,qBAAoC,CAChDjR,QAAS,KACTI,eAAgB,GAChBI,OAAQ,MCTL,IAAM8Q,GAAcC,aACzB,CACE/Q,OAAQwQ,GAAcQ,a,wCCIbC,GAAb,6FAEE,WACE,OAAOC,aACL7P,KAAK8P,oBACL9P,KAAK+P,eALX,iCASE,SACEC,EACA7P,GAEA,OAAO6P,EAAQC,KACbC,aAAOlS,EAAiBK,yBACxB8R,aAAQ,uCAAC,WAAOd,EAAQ5K,GAAf,iBAAAoB,EAAA,6DACDuK,EAAef,EADd,SAEsB1K,EAAY0L,4BAA4BD,EAAa9R,SAF3E,cAEDC,EAFC,yBAIAqG,QAAQS,QACbnH,EAAqBoS,kBAAkB/R,KALlC,2CAAD,4DAfd,yBA0BE,SACEyR,EACA7P,GAEA,OAAO6P,EAAQC,KACbC,aAAOlS,EAAiBU,aACxByR,aAAQ,uCAAC,WAAOd,EAAQ5K,GAAf,qBAAAoB,EAAA,+DACcwJ,EACqB/Q,QAAlCG,EAFD,EAECA,SAAUN,EAFX,EAEWA,QAFX,SAGcwG,EAAYoL,YAAY5R,EAASM,GAH/C,cAGDE,EAHC,yBAKAiG,QAAQS,QACbnH,EAAqBsR,UAAU7Q,KAN1B,2CAAD,8DAhCd,KCNa4R,GAAb,oGAEE,WACE,OAAOV,aACLD,GAAYY,gBAJlB,KC6BO,IAAMC,GAtBb,SAA4BC,GAC1B,IAAMC,EAAc,GACdC,EAAiBC,eACjBC,EAAQP,GAASQ,kBACvBJ,EAAYjN,KAAKkN,GASjB,IAAMI,EAAYC,aAAQC,KAAe,WAAf,EAAmBP,IAEvCF,EAAQU,aAAY1B,GAAaiB,EAAgBM,GAIvD,OAFAJ,EAAeQ,IAAIN,GAEZL,EAGYY,CA1BY,CAC/B1S,OAAQwQ,GAAcC,uBCCxBkC,IAASC,OACP,cAAC,IAAD,CAAUd,MAAOA,GAAjB,SACA,cAAC,IAAMe,WAAP,UACE,cAAC,GAAD,QAGFC,SAASC,eAAe,SAM1BhD,O","file":"static/js/main.6fc25efc.chunk.js","sourcesContent":["export enum RecipeActionType {\n  INITIALISE_COUNTRY_PAGE = \"initialise_country_page\",\n  SET_RECIPE_PREVIEWS = \"set_recipe_previews\",\n  LOAD_RECIPE = \"load_recipe\",\n  SET_RECIPE = \"set_recipe\"\n}","import { Recipe } from \"../../models/Recipe\";\nimport { RecipePreview } from \"../../models/RecipePreview\";\nimport { SupportedCountry } from \"../../models/SupportedCountry\";\nimport { InitialiseCountryPageAction, LoadRecipeAction, SetRecipeAction, SetRecipePreviewsAction } from \"./RecipeActions\";\nimport { RecipeActionType } from \"./RecipeActionType\";\n\nexport class RecipeActionCreators {\n\n  public static initialiseCountryPage(country: SupportedCountry): InitialiseCountryPageAction {\n    return {\n      type: RecipeActionType.INITIALISE_COUNTRY_PAGE,\n      payload: country\n    }\n  }\n\n  public static setRecipePreviews(recipePreviews: RecipePreview[]): SetRecipePreviewsAction {\n    return {\n      type: RecipeActionType.SET_RECIPE_PREVIEWS,\n      payload: recipePreviews\n    }\n  }\n\n  public static loadRecipe(country: SupportedCountry, recipeId: string): LoadRecipeAction {\n    return {\n      type: RecipeActionType.LOAD_RECIPE,\n      payload: {\n        country,\n        recipeId\n      }\n    }\n  }\n\n  public static setRecipe(recipe: Recipe): SetRecipeAction {\n    return {\n      type: RecipeActionType.SET_RECIPE,\n      payload: recipe\n    }\n  }\n}","export enum SupportedCountry {\n  Kenya = \"kenya\"\n}","import { RouteComponentProps } from \"react-router-dom\"\nimport { CountryProp } from \"../models/CountryProp\"\nimport { SupportedCountry } from \"../models/SupportedCountry\"\n\nexport class CountryUtils {\n\n  public static isKnownCountry(countryName: string | null): countryName is SupportedCountry {\n    const lowercaseCountry = countryName?.toLowerCase()\n    return lowercaseCountry != null && Object.values(SupportedCountry)\n      .some((country: string) => country === lowercaseCountry)\n  }\n\n  public static getCountryNameFromProp(props: RouteComponentProps<CountryProp>): string {\n    return props.match.params.country.toLowerCase()\n  }\n\n  public static isKnownCountryInProp(props: RouteComponentProps<CountryProp>): boolean {\n    const countryName = CountryUtils.getCountryNameFromProp(props)\n    return CountryUtils.isKnownCountry(countryName)\n  }\n}","import { WithTranslation } from \"react-i18next\";\n\nexport class TextUtils {\n\n  public static getString(\n    props: WithTranslation,\n    translationKey: string,\n    args: any = undefined\n  ): string {\n    return props.t(translationKey, args)\n  }\n\n  public static getStringOrPlaceholder(\n    props: WithTranslation,\n    translationKey: string,\n    placeholder: string\n  ): string {\n    const localizedString = props.t(translationKey)\n    if (!localizedString || localizedString === translationKey) {\n      return placeholder\n    } else {\n      return localizedString\n    }\n  }\n\n  public static getIngredientString(\n    props: WithTranslation,\n    translationKey: string\n  ): string {\n    return this.getString(\n      props,\n      `ingredients:${translationKey}`\n    )\n  }\n\n  public static getHarmfulIngredientString(\n    props: WithTranslation,\n    translationKey: string\n  ): string {\n    return this.getString(\n      props,\n      `harmful-ingredients:${translationKey}`\n    )\n  }\n\n  public static getHarmfulIngredientStringWithArgs(\n    props: WithTranslation,\n    translationKey: string,\n    args: { [key: string]: any }\n  ): string {\n    return this.getString(\n      props,\n      `harmful-ingredients:${translationKey}`,\n      args\n    )\n  }\n\n  public static getRecipeString(\n    props: WithTranslation,\n    translationKey: string,\n    recipeId: string\n  ): string {\n    return this.getString(\n      props,\n      `recipe-${recipeId}:${translationKey}`\n    )\n  }\n\n\n}","import React from \"react\"\nimport { RecipePreview as RecipePreviewModel } from \"../../../models/RecipePreview\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport { Card, CardBody, Grid, Image, ResponsiveContext } from \"grommet\"\nimport './RecipePreview.scss'\nimport { TextUtils } from \"../../../utils/TextUtils\"\n\ntype RecipePreviewProps = WithTranslation & {\n  recipePreview: RecipePreviewModel\n}\n\ntype RecipePreviewState = {\n  isTranslationReady: boolean\n}\n\nclass RecipePreview extends React.PureComponent<RecipePreviewProps, RecipePreviewState> {\n\n  state: RecipePreviewState = {\n    isTranslationReady: false\n  }\n\n  namespacePromise: Promise<void> | null = null\n\n  componentDidMount() {\n    this.props.i18n.loadNamespaces(`recipe-${this.props.recipePreview.id}`, () => {\n      this.setState({\n        isTranslationReady: true\n      })\n    })\n  }\n\n  getLayoutColumnsForSize(size: string): string[] {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        // Phone screens have a single full-width column\n        return [\"full\"]\n      default:\n        // Tablet and desktop screens have two columns\n        // thumbnail in the first, and content in the second\n        return [\"1/3\", \"2/3\"]\n    }\n  }\n\n  getLayoutRowsForSize(size: string): string[] {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getLayoutGridAreasForSize(\n    size: string\n    ): { name?: string; start?: number[]; end?: number[] }[] {\n      switch (size) {\n        case \"xsmall\":\n        case \"small\":\n          return [\n            /**\n             * Small screens have two full-width rows\n             */\n            { name: \"thumbnail\", start: [0, 0], end: [0, 0] },\n            { name: \"content\", start: [0, 1], end: [0, 1] }\n          ]\n        default:\n          /**\n           * Medium, large and xlarge screens use a single row + two columns\n           */\n          return [\n            { name: \"thumbnail\", start: [0, 0], end: [0, 0] },\n            { name: \"content\", start: [1, 0], end: [1, 0] }\n          ]\n      }\n    }\n  render() {\n    const recipePreview = this.props.recipePreview\n    if (!this.state.isTranslationReady) {\n      return (\n      <Card animation=\"fadeIn\" className=\"preview\" height=\"auto\" width=\"full\">\n\n      </Card>\n      )\n    }\n    return (\n      <Card animation=\"fadeIn\" className=\"preview\" height=\"auto\" width=\"full\">\n        <ResponsiveContext.Consumer>\n          {(size) => (\n            <Grid\n              columns={this.getLayoutColumnsForSize(size)}\n              rows={this.getLayoutRowsForSize(size)}\n              areas={this.getLayoutGridAreasForSize(size)}\n            >\n            <Image className=\"thumbnail\" fit=\"contain\" src={recipePreview.images[0].url}  />\n            <div>\n              <h2 className=\"title\">\n              {this.getLocaleStringOrPlaceholder(\n                `${this.props.recipePreview.title}`\n              )}\n              </h2>\n              <span className=\"subtitle\">{this.getLocaleStringOrPlaceholder(\n                `${this.props.recipePreview.subtitle}`\n              )}</span>\n              <CardBody className=\"description\" margin={{top: '3vh'}}>\n                {this.getEllipsizedDescription(this.props.recipePreview)}\n              </CardBody>\n            </div>\n            </Grid>\n          )\n          }\n        </ResponsiveContext.Consumer>\n</Card>\n    )\n  }\n\n  getLocaleStringOrPlaceholder(translationKey: string, placeholder: string = \"...\"): string {\n    if (this.state.isTranslationReady) {\n      return TextUtils.getRecipeString(\n        this.props,\n        translationKey,\n        this.props.recipePreview.id\n      )\n    } else {\n      return placeholder\n    }\n  }\n\n  getEllipsizedDescription(recipePreview: RecipePreviewModel): string {\n    const description = this.getLocaleStringOrPlaceholder(recipePreview.description)\n    if (description.length > 80) {\n      return `${description.slice(0, 80)}...`\n    } else {\n      return description\n    }\n  }\n}\n\nexport default withTranslation()(RecipePreview)\n","import { Box, List, ResponsiveContext } from \"grommet\"\nimport React from \"react\"\nimport { connect, ConnectedProps } from \"react-redux\"\nimport { Redirect, RouteComponentProps } from \"react-router-dom\"\nimport { RecipePreview } from \"../../models/RecipePreview\"\nimport { RecipeActionCreators } from \"../../store/recipe/RecipeActionCreators\"\nimport { RootState } from \"../../store/RootReducer\"\nimport { CountryUtils } from \"../../utils/CountryUtils\"\nimport RecipePreviewComponent from \"./recipe-preview/RecipePreview\"\nimport \"./CountryPage.scss\"\nimport { CountryProp } from \"../../models/CountryProp\"\n\nconst mapState = (state: RootState) => ({\n  recipePreviews: state.recipe.recipePreviews,\n})\n\nconst mapDispatch = {\n  initialiseCountryPage: RecipeActionCreators.initialiseCountryPage\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype CountryPageProps = ConnectedProps<typeof connector> &\n  RouteComponentProps<CountryProp>\n\nclass CountryPage extends React.PureComponent<CountryPageProps> {\n\n  componentDidMount() {\n    const countryName = this.getCountryName()\n    if (CountryUtils.isKnownCountry(countryName)) {\n      this.props.initialiseCountryPage(countryName)\n    }\n  }\n\n  render() {\n    if (CountryUtils.isKnownCountryInProp(this.props)) {\n      return (\n        <div>\n          <h1>{CountryUtils.getCountryNameFromProp(this.props).toLocaleUpperCase()}</h1>\n            {this.showRecipePreviews()}\n        </div>\n      )\n    } else {\n      return <Redirect to=\"/kenya\" />\n    }\n  }\n\n  getListVerticalPaddingForScreenSize(size: string): string {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"xlarge\"\n      default:\n        return \"large\"\n    }\n  }\n\n  getCountryName(): string {\n    return CountryUtils.getCountryNameFromProp(this.props)\n  }\n\n  onRecipePreviewClick(recipePreview: RecipePreview | undefined) {\n    if (!recipePreview) {\n      return\n    }\n\n    this.props.history.push(`${this.getCountryName()}/${recipePreview.id}`)\n  }\n\n  showRecipePreviews() {\n    if (this.props.recipePreviews.length > 0) {\n      // TODO (dev only): Creating multiple elements to visualize a longer list\n      // Remove before release\n      const recipePreviews = Array(10).fill(this.props.recipePreviews[0])\n      return (\n        <ResponsiveContext.Consumer>\n          {(size) => (\n            <Box className=\"recipe-previews\">\n            <List\n            onClickItem={(event: { item?: RecipePreview; index?: number }) => this.onRecipePreviewClick(event.item)}\n            pad={{vertical: this.getListVerticalPaddingForScreenSize(size)}}\n            data={recipePreviews}\n            primaryKey=\"id\"\n            children={(item: RecipePreview, index: number) => <RecipePreviewComponent recipePreview={item} />}\n            />\n            </Box>\n          )}\n        </ResponsiveContext.Consumer>\n      )\n    }\n  }\n}\n\nexport default connector(CountryPage)\n","export const RecipeMap: { [key: string]: string[] } = {\n  \"kenya\": [\n    \"ugali/ugali.json\"\n  ]\n}","import axios from \"axios\"\nimport { HarmfulIngredient } from \"../models/HarmfulIngredient\";\nimport { Ingredient } from \"../models/Ingredient\";\nimport { Recipe } from \"../models/Recipe\";\nimport { RecipeIngredient } from \"../models/RecipeIngredient\";\nimport { RecipePreview } from \"../models/RecipePreview\";\nimport { SupportedCountry } from \"../models/SupportedCountry\";\nimport { RecipeMap } from \"./RecipeMap\";\n\nexport class RecipeUtils {\n\n  private static INGREDIENT_ID_REGEX = /{{ingredient_([a-z_]*)}}/\n  private static HARMFUL_INGREDIENT_ID_REGEX = /{{harmful_ingredient_([a-z_]*)}}/\n\n  public static getRecipePreviewsForCountry(country: SupportedCountry): Promise<RecipePreview[]> {\n    return Promise.all(\n      RecipeMap[country].map(countryRecipePath => {\n        // No /public prefix\n        // /public/recipes/... is available at recipes/... in the browser\n        return this.getJSONByLocalPath(`recipes/${country}/${countryRecipePath}`) as Promise<RecipePreview>\n      })\n    )\n  }\n\n  public static async fetchRecipe(\n    country: SupportedCountry,\n    recipeId: string\n  ): Promise<Recipe> {\n    const recipePreview = await this.getJSONByLocalPath(\n      `/recipes/${country}/${recipeId}/${recipeId}.json`\n    )\n    const recipeIngredients = await this.fetchIngredients(recipePreview)\n    const harmfulIngredients = await this.fetchHarmfulIngredients(recipePreview)\n\n    return Promise.resolve({\n      ...recipePreview,\n      ingredients: recipeIngredients,\n      harmfulIngredients: harmfulIngredients\n    } as Recipe)\n  }\n\n  public static getIngredientIdFromStringOrThrow(ingredientString: string): string {\n    const matches = ingredientString.match(this.INGREDIENT_ID_REGEX)\n    if (!matches) {\n      throw Error(`Ingredient string ${ingredientString} did not contain any ingredient names`)\n    }\n\n    if (matches.length !== 2) {\n      throw Error(`Unexpected number of ingredient name matches for string ${ingredientString}. Found ${matches.length} matches`)\n    }\n\n    return matches[1]\n  }\n\n  public static hasRecipe(country: SupportedCountry, recipeId: string): boolean {\n    return RecipeMap[country].includes(`${recipeId}/${recipeId}.json`)\n  }\n\n  private static async fetchIngredients(\n    recipePreview: RecipePreview,\n  ): Promise<RecipeIngredient[]> {\n    return Promise.all(\n      recipePreview.ingredients.map(async ingredientJSON => {\n        const ingredientId = RecipeUtils.getIngredientIdFromStringOrThrow(ingredientJSON.ingredient)\n        const ingredient: Ingredient = await this.getJSONByLocalPath(`/ingredients/${ingredientId}/${ingredientId}.json`)\n        const recipeIngredient: RecipeIngredient = {\n          ingredient: ingredient,\n          quantity: ingredientJSON.quantity,\n          note: ingredientJSON.note\n        }\n        return Promise.resolve(recipeIngredient)\n      })\n    )\n  }\n\n  private static async fetchHarmfulIngredients(\n    recipePreview: RecipePreview,\n  ): Promise<HarmfulIngredient[]> {\n    return Promise.all(\n      recipePreview.harmfulIngredients.map(async harmfulIngredientString => {\n        const harmfulIngredientId = RecipeUtils.getHarmfulIngredientIdFromStringOrThrow(harmfulIngredientString)\n        const harmfulIngredient = await this.getJSONByLocalPath(`/harmful-ingredients/${harmfulIngredientId}/${harmfulIngredientId}.json`)\n\n        return Promise.resolve(harmfulIngredient)\n      })\n    )\n  }\n\n  public static getHarmfulIngredientIdFromStringOrThrow(harmfulIngredientString: string): string {\n    const matches = harmfulIngredientString.match(this.HARMFUL_INGREDIENT_ID_REGEX)\n    if (!matches) {\n      throw Error(`Harmful ingredient string ${harmfulIngredientString} did not contain any ingredient names`)\n    }\n\n    if (matches.length !== 2) {\n      throw Error(`Unexpected number of harmful ingredient name matches for string ${harmfulIngredientString}. Found ${matches.length} matches`)\n    }\n\n    return matches[1]\n  }\n\n  private static async getJSONByLocalPath(filePath: string): Promise<any> {\n    try {\n      const response = await axios.get(filePath)\n      return Promise.resolve(response.data)\n    } catch (error) {\n      // TODO Handle failure to load JSON\n      return Promise.reject(error)\n    }\n  }\n}","import { Box } from \"grommet\";\nimport React from \"react\";\nimport { withTranslation, WithTranslation } from \"react-i18next\";\nimport { KnownEffect as KnownEffectModel } from '../../../../models/KnownEffect'\nimport { TextUtils } from \"../../../../utils/TextUtils\";\nimport \"./KnownEffect.scss\"\n\ntype KnownEffectProps = {\n  effect: KnownEffectModel\n} & WithTranslation\n\nclass KnownEffect extends React.PureComponent<KnownEffectProps> {\n\n  getString(key: string): string {\n    return TextUtils.getHarmfulIngredientString(this.props, key)\n  }\n\n  showCitations() {\n    return this.props.effect.citations.map((citation, index) => {\n      if (citation.link) {\n        return <span className=\"citation\" key={index}>\n          <a href={citation.link} target=\"_blank\" rel=\"noreferrer\">{citation.authors}</a>\n        </span>\n      } else {\n        return <span className=\"citation\" key={index}>{citation.authors}</span>\n      }\n    })\n  }\n\n  render() {\n    const { effect } = this.props\n    return (\n      <Box>\n        <h4 className=\"title\">{this.getString(effect.name)}</h4>\n        <span className=\"description\">{this.getString(effect.description)}</span>\n        <Box pad={{top: 'small'}}>\n        {this.showCitations()}\n        </Box>\n      </Box>\n    )\n  }\n}\n\nexport default withTranslation(['harmful-ingredients'])(KnownEffect)","export class RandomUtils {\n\n  public static getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n}","import { Box, Grid, Image } from \"grommet\"\nimport React from \"react\"\nimport { HarmfulIngredient } from \"../../../models/HarmfulIngredient\"\nimport KnownEffect from \"./known-effect/KnownEffect\"\nimport \"./HarmfulIngredientDetail.scss\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport { TextUtils } from \"../../../utils/TextUtils\"\nimport { RandomUtils } from \"../../../utils/RandomUtils\"\n\ntype HarmfulIngredientDetailProps = {\n  size: string,\n  harmfulIngredient: HarmfulIngredient\n} & WithTranslation\n\nclass HarmfulIngredientDetail extends React.PureComponent<HarmfulIngredientDetailProps> {\n  getColumnsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"full\"]\n      default:\n        return [\"1/3\", \"1/3\", \"1/3\"]\n    }\n  }\n\n  getRowsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getGapBySize() {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"none\"\n      default:\n        return \"large\"\n    }\n  }\n\n  getString(key: string, args: { [key: string]: any }): string {\n    return this.props.t(key, args)\n  }\n\n  getHarmfulIngredientName(): string {\n    return TextUtils.getHarmfulIngredientString(this.props, this.props.harmfulIngredient.name).toLowerCase()\n  }\n\n  getHarmfulIngredientIntro(): string {\n    const randomIntro = `recipe_page_harmful_ingredient_intro${RandomUtils.getRandomElement([1, 2, 3])}`\n    return this.getString(\n      randomIntro,\n      { harmfulIngredientName: this.getHarmfulIngredientName() }\n    )\n  }\n\n  showKnownEffects() {\n    return this.props.harmfulIngredient.knownEffects.map((knownEffect, index) => {\n      return (\n        <KnownEffect effect={knownEffect} key={index} />\n      )\n    })\n  }\n\n  getEUBanMessage() {\n    return TextUtils.getHarmfulIngredientStringWithArgs(\n      this.props,\n      `harmful_ingredient_eu_not_approved_message`,\n      { harmfulIngredientName: this.getHarmfulIngredientName() }\n    )\n  }\n\n  getEUBanTitle() {\n    return TextUtils.getHarmfulIngredientString(\n      this.props,\n      `harmful_ingredient_eu_not_approved_title`\n    )\n  }\n\n  render() {\n    return (\n      <Box className=\"harmful-ingredient-detail\">\n        <h3 className=\"title\">{this.getHarmfulIngredientIntro()}</h3>\n        <span className=\"description\">{TextUtils.getHarmfulIngredientString(this.props, this.props.harmfulIngredient.description)}</span>\n        <Box>\n          <Grid columns={[\"auto\", \"flex\"]} alignSelf=\"center\" pad={{vertical: '2rem'}} gap=\"medium\">\n            <Image style={{maxWidth: '10rem'}} fit=\"contain\" src=\"/harmful-ingredients/images/eu-ban.svg\"/>\n            <Box>\n              <h3 className=\"eu-ban-title\">{this.getEUBanTitle()}</h3>\n              <span className=\"description\">{this.getEUBanMessage()}</span>\n            </Box>\n          </Grid>\n        </Box>\n        <Grid\n        rows={this.getRowsForSize()}\n        columns={this.getColumnsForSize()}\n        gap={this.getGapBySize()}\n      >\n        {this.showKnownEffects()}\n      </Grid>\n      </Box>\n    )\n  }\n}\n\nexport default withTranslation(['recipe-page'])(HarmfulIngredientDetail)\n","import React from \"react\"\nimport { Box } from \"grommet\";\nimport { PadType } from \"grommet/utils\";\nimport './Separator.scss';\n\ninterface SeparatorProps {\n  pad?: PadType,\n  thickness?: string\n}\n\nexport default class Separator extends React.PureComponent<SeparatorProps> {\n\n  render() {\n    return (\n      <Box pad={this.props.pad}>\n        <div className=\"separator\" style={{height: this.props.thickness || '1px' }}/>\n      </Box>\n    )\n  }\n}","import { Box, Grid, Image } from \"grommet\"\nimport React from \"react\"\nimport { Recipe } from \"../../../models/Recipe\"\nimport Separator from \"../../../common-components/separator/Separator\"\nimport \"./RecipeBanner.scss\"\n\ntype RecipeBannerProps = {\n  recipe: Recipe\n  size: string\n  getRecipeString: (translationKey: string) => string\n}\n\nexport default class RecipeBanner extends React.PureComponent<RecipeBannerProps> {\n  getBannerColumnsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        // Phone screens have a single full-width column\n        return [\"full\"]\n      default:\n        // Tablet and desktop screens have two columns\n        // image in the first, and intro in the second\n        return [\"1/2\", \"1/2\"]\n    }\n  }\n\n  getBannerRowsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getBannerAreasForSize(): {\n    name?: string\n    start?: number[]\n    end?: number[]\n  }[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\n          /**\n           * Small screens have two full-width rows\n           */\n          { name: \"image\", start: [0, 0], end: [0, 0] },\n          { name: \"intro\", start: [0, 1], end: [0, 1] },\n        ]\n      default:\n        /**\n         * Medium, large and xlarge screens use a single row + two columns\n         */\n        return [\n          { name: \"intro\", start: [0, 0], end: [0, 0] },\n          { name: \"image\", start: [1, 0], end: [1, 0] },\n        ]\n    }\n  }\n\n  getBannerAreaGapBySize() {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"none\"\n      default:\n        return \"large\"\n    }\n  }\n\n  getRecipeString(translationKey: string) {\n    return this.props.getRecipeString(translationKey)\n  }\n\n  getSubtitle(recipe: Recipe): string {\n    if (recipe.subtitle) {\n      return this.getRecipeString(recipe.subtitle)\n    } else {\n      return \"\"\n    }\n  }\n\n  render() {\n    const recipe = this.props.recipe\n    return (\n        <Box className=\"banner\" background=\"light-2\">\n          <Grid\n            columns={this.getBannerColumnsForSize()}\n            rows={this.getBannerRowsForSize()}\n            areas={this.getBannerAreasForSize()}\n            gap={this.getBannerAreaGapBySize()}\n          >\n            <Box gridArea=\"intro\" className=\"intro\">\n              <h1 className=\"title\">{this.getRecipeString(recipe.title)}</h1>\n              <span className=\"subtitle\">{this.getSubtitle(recipe)}</span>\n              <Separator pad=\"medium\" />\n              <p className=\"description max-width-90\">\n                {this.getRecipeString(recipe.description)}\n              </p>\n            </Box>\n            <Image\n              gridArea=\"image\"\n              className=\"image\"\n              src={recipe.images[0].url}\n              fit=\"cover\"\n            />\n          </Grid>\n        </Box>\n    )\n  }\n}\n","import { Image } from \"grommet\"\nimport React from \"react\"\n\ntype IngredientIconProps = {\n  url: string\n}\n\nexport default class IngredientIcon extends React.PureComponent<IngredientIconProps> {\n\n  render() {\n    return <Image fit=\"contain\" className=\"ingredient-icon\" src={this.props.url} />\n  }\n}","import React from \"react\"\nimport { Box, Grid } from \"grommet\";\nimport { HarmfulIngredient as HarmfulIngredientModel } from \"../../../../../models/HarmfulIngredient\"\nimport { TextUtils } from \"../../../../../utils/TextUtils\";\nimport { withTranslation, WithTranslation } from \"react-i18next\";\nimport { RandomUtils } from \"../../../../../utils/RandomUtils\";\nimport \"./HarmfulIngredient.scss\";\nimport IngredientIcon from \"../../../../../common-components/ingredient-icon/IngredientIcon\";\n\ntype HarmfulIngredientProps = {\n  harmfulIngredient: HarmfulIngredientModel,\n  recipeId: string\n} & WithTranslation\n\nclass HarmfulIngredient extends React.PureComponent<HarmfulIngredientProps> {\n\n  getIngredientDetails(): string {\n    return TextUtils.getHarmfulIngredientString(\n      this.props,\n      this.props.harmfulIngredient.name\n    )\n  }\n\n  getBarb(): string {\n    if (this.props.harmfulIngredient.barbs.length > 0) {\n      const barbKey = RandomUtils.getRandomElement(\n        this.props.harmfulIngredient.barbs\n      )\n      return TextUtils.getHarmfulIngredientString(this.props, barbKey)\n    }\n\n    return \"\"\n  }\n\n  render() {\n    return (\n      <Grid columns={[\"1/4\", \"3/4\"]} rows=\"full\" height=\"xsmall\" gap=\"small\">\n        <Box className=\"ingredient-image-container\">\n          <IngredientIcon url={this.props.harmfulIngredient.image.url} />\n        </Box>\n        <Box alignContent=\"start\" alignSelf=\"center\">\n          <div className=\"ingredient-title\">{this.getIngredientDetails()}</div>\n          <div className=\"max-width-90 ingredient-barb\">{this.getBarb()}</div>\n        </Box>\n      </Grid>\n    )\n  }\n}\n\nexport default withTranslation(['harmful-ingredients'])(HarmfulIngredient)","import { Box, Grid } from \"grommet\";\nimport React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport IngredientIcon from \"../../../../../common-components/ingredient-icon/IngredientIcon\";\nimport { RecipeIngredient as RecipeIngredientModel } from \"../../../../../models/RecipeIngredient\";\nimport { TextUtils } from \"../../../../../utils/TextUtils\";\nimport \"./RecipeIngredient.scss\";\n\ntype RecipeIngredientProps = {\n  recipeIngredient: RecipeIngredientModel\n  recipeId: string\n} & WithTranslation\n\nclass RecipeIngredient extends React.PureComponent<RecipeIngredientProps> {\n\n  getIngredientDetails(): string {\n    const { recipeIngredient, recipeId } = this.props\n    let noteTranslationKey = recipeIngredient.note\n    const ingredientName = TextUtils.getIngredientString(this.props, recipeIngredient.ingredient.name)\n    const recipeQuantity = TextUtils.getRecipeString(this.props, recipeIngredient.quantity, recipeId)\n    const ingredientAndQuantity = `${ingredientName} - ${recipeQuantity}`\n    let note: string | null = null\n    if (noteTranslationKey) {\n      note = TextUtils.getRecipeString(this.props, noteTranslationKey, recipeId)\n    }\n    if (note) {\n      return `${ingredientAndQuantity} (${note})`\n    } else {\n      return ingredientAndQuantity\n    }\n  }\n\n  render() {\n    const { ingredient } = this.props.recipeIngredient\n    return (\n      <Grid columns={[\"1/4\", \"3/4\"]} rows=\"full\" height=\"xsmall\" gap=\"small\" pad={{bottom: 'xsmall'}}>\n        <Box className=\"ingredient-image-container\">\n          <IngredientIcon url={ingredient.image.url} />\n        </Box>\n        <Box alignContent=\"start\" alignSelf=\"center\">\n          <div className=\"ingredient-detail\">{this.getIngredientDetails()}</div>\n        </Box>\n      </Grid>\n    )\n  }\n}\n\nexport default withTranslation(['ingredients'])(RecipeIngredient)","import { Box } from \"grommet\"\nimport React from \"react\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport { Recipe } from \"../../../../models/Recipe\"\nimport HarmfulIngredient from \"./harmful-ingredient/HarmfulIngredient\"\nimport RecipeIngredient from \"./recipe-ingredient/RecipeIngredient\"\nimport \"./RecipeIngredientList.scss\"\ntype RecipeIngredientListProps = {\n  recipe: Recipe\n  size: string\n} & WithTranslation\n\nclass RecipeIngredientList extends React.PureComponent<RecipeIngredientListProps> {\n  getContentColumnsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        // Phone screens have a single full-width column\n        return [\"full\"]\n      default:\n        // Tablet and desktop screens have two columns\n        // image in the first, and intro in the second\n        return [\"1/2\", \"1/2\"]\n    }\n  }\n\n  getContentRowsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getContentAreasForSize(): {\n    name?: string\n    start?: number[]\n    end?: number[]\n  }[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\n          /**\n           * Small screens have two full-width rows\n           */\n          { name: \"ingredients\", start: [0, 0], end: [0, 0] },\n          { name: \"steps\", start: [0, 1], end: [0, 1] },\n        ]\n      default:\n        /**\n         * Medium, large and xlarge screens use a single row + two columns\n         */\n        return [\n          { name: \"ingredients\", start: [0, 0], end: [0, 0] },\n          { name: \"steps\", start: [1, 0], end: [1, 0] },\n        ]\n    }\n  }\n\n  getContentAreaGapBySize() {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"none\"\n      default:\n        return \"large\"\n    }\n  }\n\n  showRecipeIngredients() {\n    return this.props.recipe.ingredients.map((ingredient) => {\n      return (\n        <RecipeIngredient\n          recipeIngredient={ingredient}\n          key={ingredient.ingredient.id}\n          recipeId={this.props.recipe.id}\n        />\n      )\n    })\n  }\n\n  showHarmfulIngredients() {\n    return this.props.recipe.harmfulIngredients.map((harmfulIngredient) => {\n      return (\n        <HarmfulIngredient\n          harmfulIngredient={harmfulIngredient}\n          recipeId={this.props.recipe.id}\n          key={harmfulIngredient.id}\n        />\n      )\n    })\n  }\n\n  getHarmfulIngredientTitle() {\n    const harmfulIngredientsCount = this.props.recipe.harmfulIngredients.length\n    if (harmfulIngredientsCount === 0) {\n      return \"\"\n    } else if (harmfulIngredientsCount === 1) {\n      return this.props.t('recipe_page_special_ingredient')\n    } else {\n      return this.props.t('recipe_page_special_ingredients')\n    }\n  }\n\n  render() {\n    return (<Box gridArea=\"ingredients\">\n      {this.showRecipeIngredients()}\n      <h4 className=\"special-ingredient-title\">{this.getHarmfulIngredientTitle()}</h4>\n      {this.showHarmfulIngredients()}\n      </Box>\n    )\n  }\n}\n\nexport default withTranslation(['recipe-page'])(RecipeIngredientList)\n","import { Box } from \"grommet\"\nimport React from \"react\"\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./Step.scss\"\n\ntype StepProps = {\n  step: string\n  number: number\n} & WithTranslation\n\nclass Step extends React.PureComponent<StepProps> {\n\n  getLocaleString(translationKey: string): string {\n    return this.props.t(translationKey)\n  }\n\n  render() {\n    return (\n      <Box className=\"step\">\n        <h4 className=\"title\">{`${this.getLocaleString('recipe_page_step')} ${this.props.number}`}</h4>\n        <span className=\"text max-width-90\">{this.props.step}</span>\n      </Box>\n    )\n  }\n}\n\nexport default withTranslation(['recipe-page'])(Step)","import React from \"react\"\nimport { Recipe } from \"../../../../models/Recipe\"\nimport Step from \"./step/Step\"\n\ntype StepListProps = {\n  recipe: Recipe\n}\n\nclass StepList extends React.PureComponent<StepListProps> {\n\n  showSteps() {\n    return this.props.recipe.steps.map((step, index) => {\n      return <Step key={index} step={step} number={index + 1} />\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.showSteps()}\n      </div>\n    )\n  }\n}\n\nexport default StepList","import { Box, Grid } from \"grommet\"\nimport React from \"react\"\nimport { Recipe } from \"../../../models/Recipe\"\nimport RecipeIngredientList from \"./recipe-ingredient-list/RecipeIngredientList\"\nimport StepList from \"./step-list/StepList\"\nimport \"./RecipeContent.scss\"\n\ntype RecipeContentProps = {\n  recipe: Recipe\n  size: string\n}\n\nclass RecipeContent extends React.PureComponent<RecipeContentProps> {\n  getContentColumnsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        // Phone screens have a single full-width column\n        return [\"full\"]\n      default:\n        // Tablet and desktop screens have two columns\n        // image in the first, and intro in the second\n        return [\"1/2\", \"1/2\"]\n    }\n  }\n\n  getContentRowsForSize(): string[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getContentAreasForSize(): {\n    name?: string\n    start?: number[]\n    end?: number[]\n  }[] {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\n          /**\n           * Small screens have two full-width rows\n           */\n          { name: \"ingredient-list\", start: [0, 0], end: [0, 0] },\n          { name: \"step-list\", start: [0, 1], end: [0, 1] },\n        ]\n      default:\n        /**\n         * Medium, large and xlarge screens use a single row + two columns\n         */\n        return [\n          { name: \"ingredient-list\", start: [0, 0], end: [0, 0] },\n          { name: \"step-list\", start: [1, 0], end: [1, 0] },\n        ]\n    }\n  }\n\n  getContentAreaGapBySize() {\n    switch (this.props.size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"none\"\n      default:\n        return \"large\"\n    }\n  }\n\n  render() {\n    return (\n      <Box className=\"content\">\n        <Grid\n          columns={this.getContentColumnsForSize()}\n          rows={this.getContentRowsForSize()}\n          areas={this.getContentAreasForSize()}\n          gap={this.getContentAreaGapBySize()}\n        >\n          <Box gridArea=\"ingredient-list\">\n            <RecipeIngredientList\n              recipe={this.props.recipe}\n              size={this.props.size}\n            />\n          </Box>\n          <Box gridArea=\"step-list\">\n            <StepList recipe={this.props.recipe} />\n          </Box>\n        </Grid>\n      </Box>\n    )\n  }\n}\n\nexport default RecipeContent\n","import { ResponsiveContext } from \"grommet\"\nimport React from \"react\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport { connect, ConnectedProps } from \"react-redux\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { CountryProp } from \"../../models/CountryProp\"\nimport { Recipe } from \"../../models/Recipe\"\nimport { RecipeActionCreators } from \"../../store/recipe/RecipeActionCreators\"\nimport { RootState } from \"../../store/RootReducer\"\nimport { CountryUtils } from \"../../utils/CountryUtils\"\nimport { RecipeUtils } from \"../../utils/RecipeUtils\"\nimport { TextUtils } from \"../../utils/TextUtils\"\nimport HarmfulIngredientDetail from \"./harmful-ingredient-detail/HarmfulIngredientDetail\"\nimport RecipeBanner from \"./recipe-banner/RecipeBanner\"\nimport RecipeContent from \"./recipe-content/RecipeContent\"\n\nconst mapState = (state: RootState) => ({\n  recipe: state.recipe.recipe,\n})\n\nconst mapDispatch = {\n  loadRecipe: RecipeActionCreators.loadRecipe,\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype RecipePageProps = ConnectedProps<typeof connector> &\n  RouteComponentProps<CountryProp> &\n  RouteComponentProps<{ recipeId: string }> &\n  WithTranslation\n\ntype RecipeState = {\n  isTranslationReady: boolean\n}\n\nclass RecipePage extends React.PureComponent<RecipePageProps, RecipeState> {\n  state: RecipeState = {\n    isTranslationReady: false,\n  }\n\n  componentDidMount() {\n    const countryName = CountryUtils.getCountryNameFromProp(this.props)\n    const recipeId = this.props.match.params.recipeId\n    if (\n      CountryUtils.isKnownCountry(countryName) &&\n      RecipeUtils.hasRecipe(countryName, recipeId)\n    ) {\n      this.props.loadRecipe(countryName, recipeId)\n    }\n  }\n\n  componentDidUpdate(props: RecipePageProps) {\n    if (!this.state.isTranslationReady && this.props.recipe != null) {\n      this.loadTranslationStrings()\n    }\n  }\n\n  loadTranslationStrings() {\n    const recipe = this.props.recipe as Recipe\n    this.props.i18n.loadNamespaces(`recipe-${recipe.id}`, () => {\n      this.setState({\n        isTranslationReady: true,\n      })\n    })\n  }\n\n  getRecipeString(translationKey: string): string {\n    return TextUtils.getRecipeString(\n      this.props,\n      translationKey,\n      this.props.recipe!.id\n    )\n  }\n\n  getIngredientString(translationKey: string): string {\n    return TextUtils.getIngredientString(this.props, translationKey)\n  }\n\n  showHarmfulIngredientDetails(size: string) {\n    return this.props.recipe?.harmfulIngredients.map((harmfulIngredient, index) => {\n      return (\n        <HarmfulIngredientDetail harmfulIngredient={harmfulIngredient} key={index} size={size}/>\n      )\n    })\n  }\n\n  render() {\n    const recipe = this.props.recipe\n    if (!recipe || !this.state.isTranslationReady) {\n      return <div>Loading...</div>\n    }\n\n    return (\n      <ResponsiveContext.Consumer>\n        {(size) => (\n          <main>\n            <RecipeBanner\n              size={size}\n              recipe={recipe}\n              getRecipeString={(translationKey) =>\n                this.getRecipeString(translationKey)\n              }\n            />\n            <RecipeContent recipe={recipe} size={size}/>\n            {this.showHarmfulIngredientDetails(size)}\n          </main>\n        )}\n      </ResponsiveContext.Consumer>\n    )\n  }\n}\n\nexport default connector(withTranslation([\"ingredients\", \"harmful-ingredients\", \"recipe-page\"])(RecipePage))\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  // load translation using http -> see /public/locales\n  // Refer: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // Refer: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: (!process.env.NODE_ENV || process.env.NODE_ENV === 'development'),\n\n    interpolation: {\n      escapeValue: false // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n","import { Anchor, Header, ResponsiveContext, Box, Menu } from \"grommet\"\nimport { Grommet as GrommetIcon, Menu as MenuIcon } from \"grommet-icons\"\nimport React from \"react\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport \"./SiteHeader.scss\"\n\ntype SiteHeaderProps = WithTranslation\n\nclass SiteHeader extends React.PureComponent<SiteHeaderProps> {\n  getSmallScreenHeader() {\n    return (\n      <Box justify=\"end\">\n        <Menu\n          a11yTitle=\"Navigation Menu\"\n          dropProps={{ align: { top: \"bottom\", right: \"right\" } }}\n          icon={<MenuIcon color=\"brand\" />}\n          items={[\n            {\n              label: (\n                <Box pad=\"small\" className=\"header-item\">\n                  {this.getLocaleString(\"site_header_about\")}\n                </Box>\n              ),\n              href: \"/about\",\n            },\n          ]}\n        />\n      </Box>\n    )\n  }\n\n  getStandardHeader() {\n    return (\n      <Box justify=\"end\" direction=\"row\" gap=\"medium\">\n        <Anchor\n          className=\"header-item\"\n          href=\"/about\"\n          label={this.getLocaleString(\"site_header_about\")}\n        />\n      </Box>\n    )\n  }\n\n  getLocaleString(translationKey: string, args: any = undefined): string {\n    return this.props.t(translationKey, args)\n  }\n\n  render() {\n    return (\n      <Header background=\"light-4\" pad=\"small\" height=\"xxsmall\">\n        <Anchor\n          className=\"header-title\"\n          href=\"https://traditional.recipes\"\n          icon={<GrommetIcon color=\"document\" />}\n          label={this.getLocaleString(\"site_header_title\")}\n        />\n\n        <ResponsiveContext.Consumer>\n          {(size) =>\n            size === \"small\"\n              ? this.getSmallScreenHeader()\n              : this.getStandardHeader()\n          }\n        </ResponsiveContext.Consumer>\n      </Header>\n    )\n  }\n}\n\nexport default withTranslation([\"site-header\"])(SiteHeader)\n","import React from \"react\"\nimport \"./App.css\"\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\"\nimport CountryPage from \"./pages/country/CountryPage\"\nimport RecipePage from \"./pages/recipe/RecipePage\"\nimport { Box, Grommet } from \"grommet\"\nimport \"./i18n\"\nimport SiteHeader from \"./common-components/site-header/SiteHeader\"\n\nconst theme = {\n  global: {\n    colors: {\n      react: \"#282c34\",\n    },\n    font: {\n      size: \"18px\",\n      height: \"20px\",\n      family:\n        \"'Inter', Menlo, Monaco, Consolas, 'Courier New', monospace\",\n    },\n  },\n}\n\nfunction App() {\n  return (\n    <React.Suspense fallback=\"Loading..\">\n      <Grommet theme={theme} full>\n        <SiteHeader />\n        <Box pad=\"medium\">\n          <BrowserRouter>\n            <Route exact path=\"/\">\n              <Redirect to=\"/kenya\" />\n            </Route>\n            <Route path=\"/:country\" component={CountryPage} exact />\n            <Route path=\"/:country/:recipeId\" component={RecipePage} />\n          </BrowserRouter>\n        </Box>\n      </Grommet>\n    </React.Suspense>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Recipe } from \"../../models/Recipe\";\nimport { RecipePreview } from \"../../models/RecipePreview\";\nimport { RecipeActions } from \"./RecipeActions\";\nimport { RecipeActionType } from \"./RecipeActionType\";\nimport { RecipeState } from \"./RecipeState\";\n\n\nexport class RecipeReducer {\n\n  public static RECIPE_INITIAL_STATE: RecipeState = {\n    country: null,\n    recipePreviews: [],\n    recipe: null\n  }\n\n  public static getReducer(state = RecipeReducer.RECIPE_INITIAL_STATE, action: RecipeActions): RecipeState {\n    switch (action.type) {\n      case RecipeActionType.SET_RECIPE_PREVIEWS: return RecipeReducer.updateRecipePreviews(state, action.payload)\n      case RecipeActionType.LOAD_RECIPE: return RecipeReducer.clearRecipe(state)\n      case RecipeActionType.SET_RECIPE: return RecipeReducer.setRecipe(state, action.payload)\n      default: return state\n    }\n  }\n\n  private static updateRecipePreviews(state: RecipeState, recipePreviews: RecipePreview[]): RecipeState {\n    return {\n      ...state,\n      recipePreviews\n    }\n  }\n\n  private static clearRecipe(state: RecipeState): RecipeState {\n    return {\n      ...state,\n      recipe: null\n    }\n  }\n\n  private static setRecipe(state: RecipeState, recipe: Recipe): RecipeState {\n    return {\n      ...state,\n      recipe\n    }\n  }\n}","import { combineReducers } from \"redux\"\nimport { RecipeReducer } from \"./recipe/RecipeReducer\"\n\nexport const rootReducer = combineReducers(\n  {\n    recipe: RecipeReducer.getReducer\n  }\n)\n\nexport type RootState = ReturnType<typeof rootReducer>","import { combineEpics, StateObservable, ofType, Epic } from \"redux-observable\";\nimport { Observable } from \"rxjs\";\nimport { mergeMap } from 'rxjs/operators'\nimport { Action } from \"../../models/Action\";\nimport { RecipeUtils } from \"../../utils/RecipeUtils\";\nimport { RootState } from \"../RootReducer\";\nimport { InitialiseCountryPageAction, LoadRecipeAction, RecipeActions } from \"./RecipeActions\";\nimport { RecipeActionCreators } from \"./RecipeActionCreators\";\nimport { RecipeActionType } from \"./RecipeActionType\";\nexport class RecipeEpics {\n\n  public static getEpics(): Epic {\n    return combineEpics(\n      this.fetchRecipePreviews,\n      this.fetchRecipe\n    )\n  }\n\n  public static fetchRecipePreviews(\n    action$: Observable<Action<RecipeActionType>>,\n    state: StateObservable<RootState>\n  ): Observable<RecipeActions> {\n    return action$.pipe(\n      ofType(RecipeActionType.INITIALISE_COUNTRY_PAGE),\n      mergeMap(async (action, index) => {\n        const recipeAction = action as InitialiseCountryPageAction\n        const recipePreviews = await RecipeUtils.getRecipePreviewsForCountry(recipeAction.payload)\n\n        return Promise.resolve(\n          RecipeActionCreators.setRecipePreviews(recipePreviews)\n        )\n      })\n    )\n  }\n\n  public static fetchRecipe(\n    action$: Observable<Action<RecipeActionType>>,\n    state: StateObservable<RootState>\n  ): Observable<RecipeActions> {\n    return action$.pipe(\n      ofType(RecipeActionType.LOAD_RECIPE),\n      mergeMap(async (action, index) => {\n        const recipeAction = action as LoadRecipeAction\n        const { recipeId, country} = recipeAction.payload\n        const recipe = await RecipeUtils.fetchRecipe(country, recipeId)\n\n        return Promise.resolve(\n          RecipeActionCreators.setRecipe(recipe)\n        )\n      })\n    )\n  }\n}","import { combineEpics } from \"redux-observable\"\nimport { RecipeEpics } from \"./recipe/RecipeEpics\"\n\nexport class RootEpic {\n\n  public static getCombinedEpic() {\n    return combineEpics(\n      RecipeEpics.getEpics()\n    )\n  }\n}","import { RootState, rootReducer } from \"./RootReducer\"\nimport { createStore, compose, applyMiddleware } from \"redux\"\nimport { createEpicMiddleware } from \"redux-observable\"\nimport { RootEpic } from './RootEpic';\nimport { RecipeReducer } from \"./recipe/RecipeReducer\";\n\nconst DEFAULT_STATE: RootState = {\n  recipe: RecipeReducer.RECIPE_INITIAL_STATE\n}\n\nfunction configureSiteStore(preloadedState: RootState) {\n  const middlewares = []\n  const epicMiddleware = createEpicMiddleware();\n  const epics = RootEpic.getCombinedEpic()\n  middlewares.push(epicMiddleware)\n\n  if (process.env.NODE_ENV === 'development') {\n    const { createLogger } = require('redux-logger');\n\n    middlewares.push(createLogger({\n      collapsed: true\n    }))\n  }\n  const enhancers = compose(applyMiddleware(...middlewares))\n\n  const store = createStore(rootReducer, preloadedState, enhancers)\n\n  epicMiddleware.run(epics)\n\n  return store\n}\n\nexport const store = configureSiteStore(DEFAULT_STATE)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { store } from './store/Store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}