{"version":3,"sources":["store/recipe/RecipeActionType.ts","store/recipe/RecipeActionCreators.ts","models/SupportedCountry.ts","utils/CountryUtils.ts","pages/country/recipe-preview/RecipePreview.tsx","pages/country/CountryPage.tsx","i18n.ts","common-components/site-header/SiteHeader.tsx","App.tsx","reportWebVitals.ts","store/recipe/RecipeReducer.ts","store/RootReducer.ts","utils/RecipeMap.ts","utils/RecipeUtils.ts","store/recipe/RecipeEpics.ts","store/RootEpic.ts","store/Store.ts","index.tsx"],"names":["RecipeActionType","SupportedCountry","RecipeActionCreators","country","type","INITIALISE_COUNTRY_PAGE","payload","recipePreviews","SET_RECIPE_PREVIEWS","CountryUtils","countryName","lowercaseCountry","toLocaleLowerCase","Object","values","some","RecipePreview","state","isTranslationReady","namespacePromise","this","props","i18n","loadNamespaces","recipePreview","internalName","setState","size","name","start","end","Card","animation","className","height","width","ResponsiveContext","Consumer","Grid","columns","getLayoutColumnsForSize","rows","getLayoutRowsForSize","areas","getLayoutGridAreasForSize","Image","fit","src","images","url","getLocaleStringOrPlaceholder","title","subtitle","CardBody","margin","top","getEllipsizedDescription","translationKey","args","undefined","placeholder","t","description","length","slice","React","PureComponent","withTranslation","mapDispatch","initialiseCountryPage","connector","connect","recipe","match","params","isKnownCountry","toLocaleUpperCase","showRecipePreviews","to","Array","fill","Box","List","pad","vertical","getListVerticalPaddingForScreenSize","data","primaryKey","children","item","index","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","process","interpolation","escapeValue","SiteHeader","justify","Menu","a11yTitle","dropProps","align","right","icon","color","items","label","getLocaleString","href","direction","gap","Anchor","Header","background","getSmallScreenHeader","getStandardHeader","theme","global","colors","react","font","family","App","Suspense","fallback","Grommet","full","exact","path","component","CountryPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RecipeReducer","RECIPE_INITIAL_STATE","action","mutateRecipePreviews","rootReducer","combineReducers","getReducer","RecipeMap","RecipeUtils","Promise","all","map","countryRecipePath","getRecipeJSONByLocalPath","recipeFilePath","axios","get","response","resolve","reject","RecipeEpics","combineEpics","fetchRecipePreviews","action$","pipe","ofType","mergeMap","a","recipeAction","getRecipePreviewsForCountry","setRecipePreviews","RootEpic","getEpics","store","preloadedState","middlewares","epicMiddleware","createEpicMiddleware","epics","getCombinedEpic","push","enhancers","compose","applyMiddleware","createStore","run","configureSiteStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fd2b78c.chunk.js","sourcesContent":["export enum RecipeActionType {\n  INITIALISE_COUNTRY_PAGE = \"initialise_country_page\",\n  SET_RECIPE_PREVIEWS = \"set_recipe_previews\"\n}","import { RecipePreview } from \"../../models/RecipePreview\";\nimport { SupportedCountry } from \"../../models/SupportedCountry\";\nimport { InitialiseCountryPageAction, SetRecipePreviewsAction } from \"./RecipeActions\";\nimport { RecipeActionType } from \"./RecipeActionType\";\n\nexport class RecipeActionCreators {\n\n  public static initialiseCountryPage(country: SupportedCountry): InitialiseCountryPageAction {\n    return {\n      type: RecipeActionType.INITIALISE_COUNTRY_PAGE,\n      payload: country\n    }\n  }\n\n  public static setRecipePreviews(recipePreviews: RecipePreview[]): SetRecipePreviewsAction {\n    return {\n      type: RecipeActionType.SET_RECIPE_PREVIEWS,\n      payload: recipePreviews\n    }\n  }\n}","export enum SupportedCountry {\n  Kenya = \"kenya\"\n}","import { SupportedCountry } from \"../models/SupportedCountry\"\n\nexport class CountryUtils {\n\n  public static isKnownCountry(countryName: string | null): countryName is SupportedCountry {\n    const lowercaseCountry = countryName?.toLocaleLowerCase()\n    return lowercaseCountry != null && Object.values(SupportedCountry)\n      .some((country: string) => country === lowercaseCountry)\n  }\n}","import React from \"react\"\nimport { RecipePreview as RecipePreviewModel } from \"../../../models/RecipePreview\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport { Card, CardBody, Grid, Image, ResponsiveContext } from \"grommet\"\nimport './RecipePreview.scss'\n\ntype RecipePreviewProps = WithTranslation & {\n  recipePreview: RecipePreviewModel\n}\n\ntype RecipePreviewState = {\n  isTranslationReady: boolean\n}\n\nclass RecipePreview extends React.PureComponent<RecipePreviewProps, RecipePreviewState> {\n\n  state: RecipePreviewState = {\n    isTranslationReady: false\n  }\n\n  namespacePromise: Promise<void> | null = null\n\n  componentDidMount() {\n    this.props.i18n.loadNamespaces(`recipe-${this.props.recipePreview.internalName}`, () => {\n      this.setState({\n        isTranslationReady: true\n      })\n    })\n  }\n\n  getLayoutColumnsForSize(size: string): string[] {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        // Phone screens have a single full-width column\n        return [\"full\"]\n      default:\n        // Tablet and desktop screens have two columns\n        // thumbnail in the first, and content in the second\n        return [\"1/3\", \"2/3\"]\n    }\n  }\n\n  getLayoutRowsForSize(size: string): string[] {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        return [\"auto\", \"auto\"]\n      default:\n        return [\"auto\"]\n    }\n  }\n\n  getLayoutGridAreasForSize(\n    size: string\n    ): { name?: string; start?: number[]; end?: number[] }[] {\n      switch (size) {\n        case \"xsmall\":\n        case \"small\":\n          return [\n            /**\n             * Small screens have two full-width rows\n             */\n            { name: \"thumbnail\", start: [0, 0], end: [0, 0] },\n            { name: \"content\", start: [0, 1], end: [0, 1] }\n          ]\n        default:\n          /**\n           * Medium, large and xlarge screens use a single row + two columns\n           */\n          return [\n            { name: \"thumbnail\", start: [0, 0], end: [0, 0] },\n            { name: \"content\", start: [1, 0], end: [1, 0] }\n          ]\n      }\n    }\n  render() {\n    const recipePreview = this.props.recipePreview\n    if (!this.state.isTranslationReady) {\n      return (\n      <Card animation=\"fadeIn\" className=\"preview\" height=\"auto\" width=\"full\">\n\n      </Card>\n      )\n    }\n    return (\n      <Card animation=\"fadeIn\" className=\"preview\" height=\"auto\" width=\"full\">\n        <ResponsiveContext.Consumer>\n          {(size) => (\n            <Grid\n              columns={this.getLayoutColumnsForSize(size)}\n              rows={this.getLayoutRowsForSize(size)}\n              areas={this.getLayoutGridAreasForSize(size)}\n            >\n            <Image className=\"thumbnail\" fit=\"contain\" src={recipePreview.images[0].url}  />\n            <div>\n              <h2 className=\"title\">\n              {this.getLocaleStringOrPlaceholder(\n                `${this.props.recipePreview.title}`\n              )}\n              </h2>\n              <span className=\"subtitle\">{this.getLocaleStringOrPlaceholder(\n                `${this.props.recipePreview.subtitle}`\n              )}</span>\n              <CardBody className=\"description\" margin={{top: '3vh'}}>\n                {this.getEllipsizedDescription(this.props.recipePreview)}\n              </CardBody>\n            </div>\n            </Grid>\n          )\n          }\n        </ResponsiveContext.Consumer>\n</Card>\n    )\n  }\n\n  getLocaleStringOrPlaceholder(translationKey: string, args: any = undefined, placeholder: string = \"...\"): string {\n    if (this.state.isTranslationReady) {\n      return this.props.t(`recipe-${this.props.recipePreview.internalName}:${translationKey}`, args)\n    } else {\n      return placeholder\n    }\n  }\n\n  getEllipsizedDescription(recipePreview: RecipePreviewModel): string {\n    const description = this.getLocaleStringOrPlaceholder(recipePreview.description)\n    if (description.length > 80) {\n      return `${description.slice(0, 80)}...`\n    } else {\n      return description\n    }\n  }\n}\n\nexport default withTranslation()(RecipePreview)\n","import { Box, List, ResponsiveContext } from \"grommet\"\nimport React from \"react\"\nimport { connect, ConnectedProps } from \"react-redux\"\nimport { Redirect, RouteComponentProps } from \"react-router-dom\"\nimport { RecipePreview } from \"../../models/RecipePreview\"\nimport { RecipeActionCreators } from \"../../store/recipe/RecipeActionCreators\"\nimport { RootState } from \"../../store/RootReducer\"\nimport { CountryUtils } from \"../../utils/CountryUtils\"\nimport RecipePreviewComponent from \"./recipe-preview/RecipePreview\"\nimport \"./CountryPage.scss\"\n\nconst mapState = (state: RootState) => ({\n  recipePreviews: state.recipe.recipePreviews,\n})\n\nconst mapDispatch = {\n  initialiseCountryPage: RecipeActionCreators.initialiseCountryPage,\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ninterface RouterProps {\n  country: string\n}\n\ntype CountryPageProps = ConnectedProps<typeof connector> &\n  RouteComponentProps<RouterProps>\n\nclass CountryPage extends React.PureComponent<CountryPageProps> {\n  componentDidMount() {\n    const countryName = this.props.match.params.country\n    if (CountryUtils.isKnownCountry(countryName)) {\n      this.props.initialiseCountryPage(countryName)\n    }\n  }\n\n  render() {\n    const countryName = this.props.match.params.country\n    if (CountryUtils.isKnownCountry(countryName)) {\n      return (\n        <div>\n          <h1>{this.props.match.params.country.toLocaleUpperCase()}</h1>\n          {/* <Grid gap=\"medium\" columns={{ count: 1, size: '40%' }} style={{paddingLeft: '20%', paddingRight: '30%'}}> */}\n            {this.showRecipePreviews()}\n          {/* </Grid> */}\n        </div>\n      )\n    } else {\n      return <Redirect to=\"/kenya\" />\n    }\n  }\n\n  getListVerticalPaddingForScreenSize(size: string): string {\n    switch (size) {\n      case \"xsmall\":\n      case \"small\":\n        return \"xlarge\"\n      default:\n        return \"large\"\n    }\n  }\n\n  showRecipePreviews() {\n    if (this.props.recipePreviews.length > 0) {\n      // TODO (dev only): Creating multiple elements to visualize a longer list\n      // Remove before release\n      const recipePreviews = Array(10).fill(this.props.recipePreviews[0])\n      return (\n        <ResponsiveContext.Consumer>\n          {(size) => (\n            <Box className=\"recipe-previews\">\n            <List\n            pad={{vertical: this.getListVerticalPaddingForScreenSize(size)}}\n            data={recipePreviews}\n            primaryKey=\"internalName\"\n            children={(item: RecipePreview, index: number) => <RecipePreviewComponent recipePreview={item} />}\n            />\n            </Box>\n          )}\n        </ResponsiveContext.Consumer>\n      )\n    }\n  }\n}\n\nexport default connector(CountryPage)\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  // load translation using http -> see /public/locales\n  // Refer: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // Refer: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: (!process.env.NODE_ENV || process.env.NODE_ENV === 'development'),\n\n    interpolation: {\n      escapeValue: false // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n","import { Anchor, Header, ResponsiveContext, Box, Menu } from \"grommet\"\nimport { Grommet as GrommetIcon, Menu as MenuIcon } from \"grommet-icons\"\nimport React from \"react\"\nimport { withTranslation, WithTranslation } from \"react-i18next\"\nimport \"./SiteHeader.scss\"\n\ntype SiteHeaderProps = WithTranslation\n\nclass SiteHeader extends React.PureComponent<SiteHeaderProps> {\n  getSmallScreenHeader() {\n    return (\n      <Box justify=\"end\">\n        <Menu\n          a11yTitle=\"Navigation Menu\"\n          dropProps={{ align: { top: \"bottom\", right: \"right\" } }}\n          icon={<MenuIcon color=\"brand\" />}\n          items={[\n            {\n              label: (\n                <Box pad=\"small\" className=\"header-item\">\n                  {this.getLocaleString(\"site_header_about\")}\n                </Box>\n              ),\n              href: \"/about\",\n            },\n          ]}\n        />\n      </Box>\n    )\n  }\n\n  getStandardHeader() {\n    return (\n      <Box justify=\"end\" direction=\"row\" gap=\"medium\">\n        <Anchor\n          className=\"header-item\"\n          href=\"/about\"\n          label={this.getLocaleString(\"site_header_about\")}\n        />\n      </Box>\n    )\n  }\n\n  getLocaleString(translationKey: string, args: any = undefined): string {\n    return this.props.t(translationKey, args)\n  }\n\n  render() {\n    return (\n      <Header background=\"light-4\" pad=\"small\" height=\"xxsmall\">\n        <Anchor\n          className=\"header-title\"\n          href=\"https://traditional.recipes\"\n          icon={<GrommetIcon color=\"document\" />}\n          label={this.getLocaleString(\"site_header_title\")}\n        />\n\n        <ResponsiveContext.Consumer>\n          {(size) =>\n            size === \"small\"\n              ? this.getSmallScreenHeader()\n              : this.getStandardHeader()\n          }\n        </ResponsiveContext.Consumer>\n      </Header>\n    )\n  }\n}\n\nexport default withTranslation([\"site-header\"])(SiteHeader)\n","import React from \"react\"\nimport \"./App.css\"\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\"\nimport CountryPage from \"./pages/country/CountryPage\"\nimport { Box, Grommet } from \"grommet\"\nimport \"./i18n\"\nimport SiteHeader from \"./common-components/site-header/SiteHeader\"\n\nconst theme = {\n  global: {\n    colors: {\n      react: \"#282c34\",\n    },\n    font: {\n      size: \"18px\",\n      height: \"20px\",\n      family:\n        \"'Inter', Menlo, Monaco, Consolas, 'Courier New', monospace\",\n    },\n  },\n}\n\nfunction App() {\n  return (\n    <React.Suspense fallback=\"Loading..\">\n      <Grommet theme={theme} full>\n        <SiteHeader />\n        <Box pad=\"medium\">\n          <BrowserRouter>\n            <Route exact path=\"/\">\n              <Redirect to=\"/kenya\" />\n            </Route>\n            <Route path=\"/:country\" component={CountryPage} />\n          </BrowserRouter>\n        </Box>\n      </Grommet>\n    </React.Suspense>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { RecipePreview } from \"../../models/RecipePreview\";\nimport { RecipeActions } from \"./RecipeActions\";\nimport { RecipeActionType } from \"./RecipeActionType\";\nimport { RecipeState } from \"./RecipeState\";\n\n\nexport class RecipeReducer {\n\n  public static RECIPE_INITIAL_STATE: RecipeState = {\n    country: null,\n    recipePreviews: [],\n    recipe: null\n  }\n\n  public static getReducer(state = RecipeReducer.RECIPE_INITIAL_STATE, action: RecipeActions): RecipeState {\n    switch (action.type) {\n      case RecipeActionType.SET_RECIPE_PREVIEWS: return RecipeReducer.mutateRecipePreviews(state, action.payload)\n      default: return state\n    }\n  }\n\n  private static mutateRecipePreviews(state: RecipeState, recipePreviews: RecipePreview[]): RecipeState {\n    return {\n      ...state,\n      recipePreviews\n    }\n  }\n}","import { combineReducers } from \"redux\"\nimport { RecipeReducer } from \"./recipe/RecipeReducer\"\n\nexport const rootReducer = combineReducers(\n  {\n    recipe: RecipeReducer.getReducer\n  }\n)\n\nexport type RootState = ReturnType<typeof rootReducer>","export const RecipeMap: { [key: string]: string[] } = {\n  \"kenya\": [\n    \"ugali/ugali.json\"\n  ]\n}","import axios from \"axios\"\nimport { RecipePreview } from \"../models/RecipePreview\";\nimport { SupportedCountry } from \"../models/SupportedCountry\";\nimport { RecipeMap } from \"./RecipeMap\";\n\nexport class RecipeUtils {\n\n  public static getRecipePreviewsForCountry(country: SupportedCountry): Promise<RecipePreview[]> {\n    return Promise.all(\n      RecipeMap[country].map(countryRecipePath => {\n        // No /public prefix\n        // /public/recipes/... is available at recipes/... in the browser\n        return this.getRecipeJSONByLocalPath(`recipes/${country}/${countryRecipePath}`) as Promise<RecipePreview>\n      })\n    )\n  }\n\n  private static async getRecipeJSONByLocalPath(recipeFilePath: string): Promise<any> {\n    try {\n      const response = await axios.get(recipeFilePath)\n      return Promise.resolve(response.data)\n    } catch (error) {\n      // TODO Handle failure to load JSON\n      return Promise.reject(error)\n    }\n  }\n}","import { combineEpics, StateObservable, ofType, Epic } from \"redux-observable\";\nimport { Observable } from \"rxjs\";\nimport { mergeMap } from 'rxjs/operators'\nimport { Action } from \"../../models/Action\";\nimport { RecipeUtils } from \"../../utils/RecipeUtils\";\nimport { RootState } from \"../RootReducer\";\nimport { InitialiseCountryPageAction, RecipeActions } from \"./RecipeActions\";\nimport { RecipeActionCreators } from \"./RecipeActionCreators\";\nimport { RecipeActionType } from \"./RecipeActionType\";\nexport class RecipeEpics {\n\n  public static getEpics(): Epic {\n    return combineEpics(\n      this.fetchRecipePreviews\n    )\n  }\n\n  public static fetchRecipePreviews(\n    action$: Observable<Action<RecipeActionType>>,\n    state: StateObservable<RootState>\n  ): Observable<RecipeActions> {\n    return action$.pipe(\n      ofType(RecipeActionType.INITIALISE_COUNTRY_PAGE),\n      mergeMap(async (action, index) => {\n        const recipeAction = action as InitialiseCountryPageAction\n        const recipePreviews = await RecipeUtils.getRecipePreviewsForCountry(recipeAction.payload)\n\n        return Promise.resolve(\n          RecipeActionCreators.setRecipePreviews(recipePreviews)\n        )\n      })\n    )\n  }\n}","import { combineEpics } from \"redux-observable\"\nimport { RecipeEpics } from \"./recipe/RecipeEpics\"\n\nexport class RootEpic {\n\n  public static getCombinedEpic() {\n    return combineEpics(\n      RecipeEpics.getEpics()\n    )\n  }\n}","import { RootState, rootReducer } from \"./RootReducer\"\nimport { createStore, compose, applyMiddleware } from \"redux\"\nimport { createEpicMiddleware } from \"redux-observable\"\nimport { RootEpic } from './RootEpic';\nimport { RecipeReducer } from \"./recipe/RecipeReducer\";\n\nconst DEFAULT_STATE: RootState = {\n  recipe: RecipeReducer.RECIPE_INITIAL_STATE\n}\n\nfunction configureSiteStore(preloadedState: RootState) {\n  const middlewares = []\n  const epicMiddleware = createEpicMiddleware();\n  const epics = RootEpic.getCombinedEpic()\n  middlewares.push(epicMiddleware)\n\n  if (process.env.NODE_ENV === 'development') {\n    const { createLogger } = require('redux-logger');\n\n    middlewares.push(createLogger({\n      collapsed: true\n    }))\n  }\n  const enhancers = compose(applyMiddleware(...middlewares))\n\n  const store = createStore(rootReducer, preloadedState, enhancers)\n\n  epicMiddleware.run(epics)\n\n  return store\n}\n\nexport const store = configureSiteStore(DEFAULT_STATE)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { store } from './store/Store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}